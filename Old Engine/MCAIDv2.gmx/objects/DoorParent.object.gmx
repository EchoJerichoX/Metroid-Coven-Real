<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>BlockParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dynamic = true;

switch (object_index)
{
   case objRedDoorUp:
   case objRedDoorDown:
   case objRedDoorLeft:
   case objRedDoorRight:
      en = 3;
      damage = false;
      flash_timer = 0;
      break;
   case objSealedDoorUp:
   case objSealedDoorDown:
   case objSealedDoorLeft:
   case objSealedDoorRight:
      deac = false;
      break;
   case objSealedDoorUpDeac:
   case objSealedDoorDownDeac:
   case objSealedDoorLeftDeac:
   case objSealedDoorRightDeac:
      image_speed = .14;
      break;
}

switch (sprite_index)
{
    //Down.
    case sprBlueDoorDown:
    case sprDoorDepoweredDown:
    case sprGreenDoorDown:
    case sprWaveDoorDown:
    case sprRedDoorDown:
    case sprSealedDoorDown:
    case sprSealedDoorDownDeactivate:
    case sprYellowDoorDown:
        mask_index = sprDoorMaskDown;
        break;
    //Left.
    case sprBlueDoorLeft:
    case sprDoorDepoweredLeft:
    case sprGreenDoorLeft:
    case sprWaveDoorLeft:
    case sprRedDoorLeft:
    case sprSealedDoorLeft:
    case sprSealedDoorLeftDeactivate:
    case sprAIDemoDoorL:
    case sprAIDemoDoorLReady:
    case sprYellowDoorLeft:
        mask_index = sprDoorMaskLeft;
        break;
    //Right.
    case sprBlueDoorRight:
    case sprDoorDepoweredRight:
    case sprGreenDoorRight:
    case sprWaveDoorRight:
    case sprRedDoorRight:
    case sprSealedDoorRight:
    case sprSealedDoorRightDeactivate:
    case sprYellowDoorRight:
        mask_index = sprDoorMaskRight;
        break;
    //Up.
    case sprBlueDoorUp:
    case sprDoorDepoweredUp:
    case sprGreenDoorUp:
    case sprWaveDoorUp:
    case sprRedDoorUp:
    case sprSealedDoorUp:
    case sprSealedDoorUpDeactivate:
    case sprYellowDoorUp:
        mask_index = sprDoorMaskUp;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.highest != id) exit;
global.highest = 0;

switch (object_index)
{
   case objBlueDoorUp:
   case objBlueDoorDown:
   case objBlueDoorLeft:
   case objBlueDoorRight:
      if (global.bluedoorscanned) then
      {
         with (instance_create(0,0,messageGen))
            { text = global.bluedoorscan1; scan = 1; }
      }
      else
      {
         sound_play(DataRec);
         global.bluedoorscanned = true;
         with (instance_create(0,0,messageGen))
            { text = global.bluedoorscan2; scan = 1; }
      }
      break;
   case objDepoweredDoorUp:
   case objDepoweredDoorDown:
   case objDepoweredDoorLeft:
   case objDepoweredDoorRight:
      with (instance_create(0,0,messageGen))
         { text = global.depowereddoorscan; scan = 1; }
      break;
   case objWaveDoorUp:
   case objWaveDoorDown:
   case objWaveDoorLeft:
   case objWaveDoorRight:
      if (global.purpledoorscanned) then
      {
         with (instance_create(0,0,messageGen))
            { text = global.wavebeamdoorscan1; scan = 1; }
      }
      else
      {
         sound_play(DataRec);
         global.purpledoorscanned = true;
         with (instance_create(0,0,messageGen))
            { text = global.wavebeamdoorscan2; scan = 1; }
      }
      break;
   case objSealedDoorUp:
   case objSealedDoorDown:
   case objSealedDoorLeft:
   case objSealedDoorRight:
   case objSealedDoorUpDeac:
   case objSealedDoorDownDeac:
   case objSealedDoorLeftDeac:
   case objSealedDoorRightDeac:
      if (global.sealeddoorscanned) then
      {
         with (instance_create(0,0,messageGen))
            { text = global.sealeddoorscan1; scan = 1; }
      }
      else
      {
         sound_play(DataRec);
         global.sealeddoorscanned = true;
         with (instance_create(0,0,messageGen))
            { text = global.sealeddoorscan2; scan = 1; }
      }
      break;
   case objRedDoorUp:
   case objRedDoorDown:
   case objRedDoorRight:
   case objRedDoorLeft:
      if (global.reddoorscanned) then
      {
         with (instance_create(0,0,messageGen))
            { text = global.reddoorscan1; scan = 1; }
      }
      else
      {
         sound_play(DataRec);
         global.reddoorscanned = true;
         with (instance_create(0,0,messageGen))
            { text = global.reddoorscan2; scan = 1; }
      }
      break;
   case objGreenDoorUp:
   case objGreenDoorDown:
   case objGreenDoorRight:
   case objGreenDoorLeft:
      if (global.greendoorscanned) then
      {
         with (instance_create(0,0,messageGen))
            { text = global.greendoorscan1; scan = 1; }
      }
      else
      {
         sound_play(DataRec);
         global.greendoorscanned = true;
         with (instance_create(0,0,messageGen))
            { text = global.greendoorscan2; scan = 1; }
      }
      break;
   case objYellowDoorUp:
   case objYellowDoorDown:
   case objYellowDoorRight:
   case objYellowDoorLeft:
      if (global.yellowdoorscanned) then
      {
         with (instance_create(0,0,messageGen))
            { text = global.yellowdoorscan1; scan = 1; }
      }
      else
      {
         sound_play(DataRec);
         global.yellowdoorscanned = true;
         with (instance_create(0,0,messageGen))
            { text = global.yellowdoorscan2; scan = 1; }
      }
      break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (object_index)
{
   case objSealedDoorUp:
   case objSealedDoorDown:
   case objSealedDoorLeft:
   case objSealedDoorRight:
      deac = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (object_index)
{
   case objSealedDoorUp:
   case objSealedDoorDown:
   case objSealedDoorLeft:
   case objSealedDoorRight:
      instance_create(x,y,objSealedDoorUpDeac);
      instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (object_index)
{
   case objRedDoorUp:
   case objRedDoorDown:
   case objRedDoorLeft:
   case objRedDoorRight:
      flash_timer = max(flash_timer-.25,0);
      if (damage = true) { flash_timer = 7; damage = false; }
      // The above line WAS in the "End Step" event. Watch for odd behavior.
      break;
   case objSealedDoorUp:
   case objSealedDoorDown:
   case objSealedDoorLeft:
   case objSealedDoorRight:
      if (deac = true) then
         { alarm[0] = 1; deac = false; }
      break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ALLWEAPParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (object_index)
{
   case objBlueDoorUp:
   case objBlueDoorDown:
   case objBlueDoorLeft:
   case objBlueDoorRight:
   // ---
   case objGreenDoorUp:
   case objGreenDoorDown:
   case objGreenDoorLeft:
   case objGreenDoorRight:
   // ---
   case objYellowDoorUp:
   case objYellowDoorDown:
   case objYellowDoorLeft:
   case objYellowDoorRight:
      OpenDoor2();
      break;
   case objWaveDoorUp:
   case objWaveDoorDown:
   case objWaveDoorLeft:
   case objWaveDoorRight:
      switch (other.object_index)
      {
         case objWaveL:
         case objWaveR:
         case objWaveChL:
         case objWaveChR:
         case objWaveChC:
            OpenDoor2();         
      }
      break;
   case objRedDoorUp:
   case objRedDoorDown:
   case objRedDoorLeft:
   case objRedDoorRight:
      switch (other.object_index)
      {
         case objMissile:
         case objHomingMissile:
            en -= 1;
            if (en &gt; 0) then
               { sound_play(DoorHit); damage = true; }
            break;
         case objSuperMissile:
         case objDiffusionMissile:
            OpenDoor2(); break;
      }
      if (en &lt;= 0)  OpenDoor2();
      break;
}
OpenDoor2();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MessageCheckDepth();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (object_index)
{
   case objSealedDoorUpDeac:
      instance_create(x,y,objDoorExplosionU);
      instance_create(x,y,objDoorDestU);
      instance_create(x,y,objBlueDoorUp);
      instance_destroy();
      break;
   case objSealedDoorDownDeac:
      instance_create(x,y,objDoorExplosionD);
      instance_create(x,y,objDoorDestD);
      instance_create(x,y,objBlueDoorDown);
      instance_destroy();
      break;
   case objSealedDoorLeftDeac:
      instance_create(x,y,objDoorExplosionL);
      instance_create(x,y,objDoorDestL);
      instance_create(x,y,objBlueDoorLeft);
      instance_destroy();
      break;
   case objSealedDoorRightDeac:
      instance_create(x,y,objDoorExplosionR);
      instance_create(x,y,objDoorDestR);
      instance_create(x,y,objBlueDoorRight);
      instance_destroy();
      break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.debugmode) and (global.curroom = 100000) draw_sprite_ext(mask_index,-1,x,y,1,1,0,c_white,.5);
else draw_self();
switch (object_index)
{
   case objRedDoorUp:
   case objRedDoorDown:
   case objRedDoorLeft:
   case objRedDoorRight:
      if (flash_timer mod 2)
      {
         draw_set_blend_mode(bm_add)
         draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle,make_color_rgb(254,254,254),1);
         draw_set_blend_mode(bm_normal)
      }
      break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
