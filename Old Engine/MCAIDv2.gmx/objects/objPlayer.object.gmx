<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerVaria</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>PlayerParent</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>aim = 0;
gunready = true;
direction = 90;
ia = 90;
scanon = true;
scantogready = true;
morphgo = true;
alarm[2] = 1;
changeweap = true;
hurtable = true;
overheated = false;
moving = false;
global.transforming = false;
bombready = true;
pulseshot = 0;
pulsechargeshot = 0;
novaready = false;
global.cursor = 1;
if (!instance_exists(objViewFollower)) instance_create(x,y,objViewFollower);
global.charge = 0;
canstep = true;
cancharge = true;
previous_x = x;
previous_y = y;
desiredweapon = 0;
s = 0;
maxs = 0;
lightsearcharge = 100;
powerbombready = true;
image_speed = .5;
mouse_angle = 0;
//global.speedboost = false;
speed_timer = 0;
moving_direction = 0;
moving_direction_previous = 0;
contact = 0;
damage = false;
flash_timer = 0;
mspeed = 0;
mdirection = 0;
mhspeed = 0;
mvspeed = 0;
delta_angle = 0;
secondary = false;
alarm[5] = 1;
dashuptimer = 0;
dashdowntimer = 0;
dashlefttimer = 0;
dashrighttimer = 0;
dashedup = 0;
dasheddown = 0;
dashedleft = 0;
dashedright = 0;
justdashed = 0;
pulseresetting = false;

alarm[0] = 1;
trail = 0;
if (global.speedtime &gt; 50) global.speedboost = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>FireCharge();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>powerbombready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.highest! = id) exit;
global.highest = 0;

with (instance_create(x,y,messageGen)) text = global.samusscan;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (pulsechargeshot = 15) 
{ 
   pulsechargeshot = 0;
   global.chargeshooting = false;
   global.charge = 0; 
   cancharge = true; 
}
else
if (pulsechargeshot &lt; 16) then
{
   a1 = point_distance(x,y,x+12,y+7);
   b1 = point_direction(x,y,x+12,y+7);
   a2 = point_distance(x,y,x+15,y+7);
   b2 = point_direction(x,y,x+15,y+7);
   c1 = lengthdir_x(a1,b1+image_angle);
   d1 = lengthdir_y(a1,b1+image_angle);
   c2 = lengthdir_x(a2,b2+image_angle);
   d2 = lengthdir_y(a2,b2+image_angle);
    
   ab = instance_create(x+c1,y+d1,objPulse);
   ab.direction = random(3)+image_angle-1.5;
   ab.image_angle = ab.direction;
    
   cd = instance_create(x+c2,y+d2,objBeamShot);
   cd.sprite_index = sprPulseShot;
   cd.image_speed = .5;
   
   sound_play(Shoot6);   
   gunready = false;
   alarm[0] = global.weaponspeed*18;
   
   pulsechargeshot += 1;
   alarm[8] = global.weaponspeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canstep = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.suit = 4) then
{
   instance_create(x,y,objPlayerFlicker);
   if (global.hypermode = false) alarm[6] = random(250)+50;
   else alarm[6] = random(50)+10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*trail += 1;
if (morphed) and (trail &gt;= 2) then
{
    trail = 0;
    with (instance_create(x,y,objPlayerBallTrail))
    { 
        image_index = other.image_index; 
        image_angle = other.image_angle;
    }
}*/
if (global.morphed = true)
and (moving = true)
and (global.inslot = false) then
{
   a = (instance_create(x,y,objPlayerBallLight)) 
   a.image_index = image_index;
   //a.image_angle = point_direction(x,y,xprevious,yprevious);
   a.image_angle = image_angle;
   alarm[5] = 1;
   exit;
}
if (global.suit = 4) then
{ 
   with (instance_create(x-7+random(15),y-7+random(15),objPhazonSpark))
       { image_speed = 1+random(1); fadespeed = .05; }
}
alarm[5] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>changeweap = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>morphgo = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(objPlayerCannon)) instance_create(x,y,objPlayerCannon);
if (!instance_exists(objPlayerCannonMissileReady)) instance_create(x,y,objPlayerCannonMissileReady);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scantogready = true;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.weapon = 7) then
{
   if (pulseshot &gt; 0) 
   and !(mouse_check_button(mb_left)) and !(mouse_check_button(mb_right))
   and (pulseresetting = false) then
   {
      pulseresetting = true;
      alarm[0] = global.weaponspeed*4;
      exit;
   }
}
gunready = true;
pulseresetting = false;
novaready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.reveal = false;
LightCircle(x,y,global.range/2+15,.5);
LightCircle(x,y,global.range,.1);
if collision_point(x,y,objHideMap,true,true)
{
   global.reveal = true;
   if global.hiddenfade&lt;0 {global.hiddenfade=0}
   global.hiddenfade+=.025
   if global.hiddenfade&gt;1 {global.hiddenfade=1}
}
else
{
   if global.hiddenfade&gt;1 {global.hiddenfade=1}
   global.hiddenfade-=.025
   if global.hiddenfade&lt;0 {global.hiddenfade=0}
}
if (global.xrayon = true)
{
   if global.hiddenfade2&lt;0 {global.hiddenfade2=0}
   global.hiddenfade2+=.025
   if global.hiddenfade2&gt;1 {global.hiddenfade2=1}
}
else
{
   if global.hiddenfade2&gt;1 {global.hiddenfade2=1}
   global.hiddenfade2-=.025
   if global.hiddenfade2&lt;0 {global.hiddenfade2=0}
}
RevealCircle(x,y,global.range/2+25,.6*global.hiddenfade);
RevealCircle(x,y,global.range/3,global.hiddenfade);
RevealCircle(x,y,global.range/4,.7*global.hiddenfade2);
if (damage = true) { flash_timer = 17; damage = false; }

if (contact) then
{
   var dir;
   if (contact.object_index = BlockParent) { dir = point_direction(x-hspeed,y-hspeed,contact.x+.5*contact.sprite_width,contact.y+.5*contact.sprite_height); }
   else { dir = point_direction(x-hspeed,y-hspeed,contact.x,contact.y); }
   
   if (abs(AngleDifference(moving_direction,dir)) &lt; 40)
   {
      speed_timer = 0;
      global.speedtime = 0;
      x = xprevious;
      y = yprevious;
   }
   contact = 0;
}
if global.speedboost=true
{ 
    if (point_distance(x,y,xprevious,yprevious) &lt; global.playersuitspeed)
    { sound_play(BombExplode); ScreenShake(1.5) }
}
global.speedboost = false;
if (abs(AngleDifference(moving_direction,image_angle)) &lt; 40) 
and (moving_direction = moving_direction_previous)
and (point_distance(x,y,xprevious,yprevious) &gt;= maxs/2)
and (global.speedboosteravail = true)
and (global.transforming = false)
and (global.morphed = false) then
{
   speed_timer += .7;
   //if (speed_timer &gt;= 100) global.speedtime += 1;
   if (speed_timer &gt;= 100)
   {
      if (global.speedtime = 0)
      and (speed_timer &gt;= 100)
      and (!sound_isplaying(SpeedBoostBuildup)) sound_play(SpeedBoostBuildup);
      global.speedtime += .5;
   }
   if (global.speedtime &gt; 50) global.speedboost = true;
}
else { speed_timer = 0; global.speedtime = 0; }

if (speed_timer &lt; 100) or (global.speedtime &lt; 50) global.speedboost = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(objIceMap)) then
{
   if (place_meeting(x,y,objIceMap))
   //and (!tile_layer_find(2000,x,y))
   and (!tile_layer_find(1001,x,y)) global.onice = true;
   else global.onice = false;
}
if (instance_exists(objWaterMap)) then
{
   if (place_meeting(x,y,objWaterMap))
   and (!tile_layer_find(2000,x,y))
   and (!tile_layer_find(1001,x,y))
   and (!place_meeting(x,y,objIceMap)) global.inwater = true;
   else global.inwater = false;
}


if (global.speedboost) image_speed = 1;
else image_speed = .5;

flash_timer = max(flash_timer-1,0);

moving_direction_previous = moving_direction;
moving_direction = 0;

delta_angle = 0;

if (global.morphed) maxs = global.playerballspeed;
if (!global.morphed)
{
   if ((dashedup = 0)
   and (dasheddown = 0)
   and (dashedleft = 0)
   and (dashedright = 0))
      { maxs = global.playersuitspeed; }
   else maxs = global.playersuitspeed*6;
}

if (CheckKeyPressed(XRAY))
{
    if (global.xrayvisoravail = true)
    and (global.morphed = false)
    and (global.transforming = false)
    {
        if (global.xrayon = false) 
            { global.xrayon = true; sound_play(XRayOn); }
        else
            { global.xrayon = false; sound_play(XRayOff); }
    }
}

if (CheckKeyPressed(HYPERMODE))
{
    if (global.suit = 4)
    and (global.phazon = 100)
    and (global.morphed = false)
    and (overheated = false)
    and (global.goback = false)
    and (global.homing = false)
    and (global.transforming = false)
    and (global.chargeshooting = false)
    and (global.canhypermode = true)
    {
        global.canhypermode = false;
        objMasterController.alarm[4] = 2400;
        global.hypermode = true;
        HyperInit(true);
        instance_create(x,y,objPlayerHypermodePop);
        instance_create(x,y,objPlayerHypermodeEffectsGen);
    }
}

if (global.hypermode = true)
{
    global.phazon -= .2;
    if (global.phazon &lt;= 0)
        { global.hypermode = false; global.phazon = 0; }
    HyperInit(false);
}

if (CheckKeyPressed(MORPHBALL))
and (!keyboard_check(vk_shift))
and (!keyboard_check(vk_control))
{
   if (global.morphballavail = true) 
   and (overheated = false) 
   and (morphgo = true) 
   and (global.morphed = false) 
   and (global.inslot = false)
   and (global.chargeshooting = false)
   and (global.homing = false)
   and (global.goback = false)
   and (global.transforming = false) then
   {
      if (global.charge &gt;= 60)
      and (global.bombavail = true)
      {
         instance_create(x,y,objBombSpreader); 
         global.charge = 0; 
         global.charging = false; 
         cancharge = true;
         global.chargeshooting = false;
      }
      instance_create(x,y,objMorph);
      sound_play(Morph);
      global.prevweapon = global.primweapon;
      global.secweaponprevious = global.secweapon;
      if (global.powerbombavail) global.secweapon = 15;
      global.weapon = 0;
      global.primweapon = 0
      global.cursor = 1;
      global.morphed = true;
      morphgo = false;
      direction = 90;
      //bombready = false;
      alarm[3] = 10;
   }
   if (morphgo = true) 
   and (global.morphed = true) 
   and (global.inslot = false)
   and !(collision_circle(x,y,8,BlockParent,true,false))
   and (global.transforming = false) then
   {
      instance_create(x,y,objMorph);
      sound_play(Unmorph);
      global.morphed = false;
      morphgo = false;
      gunready = false;
      global.primweapon = global.prevweapon;
      global.secweapon = global.secweaponprevious;
      global.weapon = global.primweapon;
      mask_index = sprPlayerMask;
      alarm[3] = 10;
      alarm[0] = 2;
   }
}

if (global.morphed = true) mask_index = sprPlayerBallMask;
else mask_index = sprPlayerMask;

if (global.speedboost) and (!sound_isplaying(SpeedBoost)) sound_loop(SpeedBoost);
if (!global.speedboost) and (sound_isplaying(SpeedBoost)) sound_stop(SpeedBoost);

moving = true;
if (global.transforming = false)
and (global.inslot = false)
and (global.homing = false) 
and (global.goback = false) then
{
   if (CheckKeyPress(MOVEUP))
   and (dashedup = 0)
   and (dasheddown = 0)
   and (dashedleft = 0)
   and (dashedright = 0) then
   {
      if (global.morphed = false) 
      {
         if (global.onice) mvspeed -= global.playersuitspeed/25;
         else mvspeed -= global.playersuitspeed/5
      }         
      if (global.morphed = true) 
      {
         if (global.onice) mvspeed -= global.playerballspeed/25;
         else mvspeed -= global.playerballspeed/5;
      }
      moving_direction = 90;
   }
   if (CheckKeyPress(MOVEDOWN)) then
   {
      if (global.morphed = false) 
      {
         if (global.onice) mvspeed += global.playersuitspeed/15;
         else mvspeed += global.playersuitspeed/5;
      }
      if (global.morphed = true) 
      {
         if (global.onice) mvspeed += global.playerballspeed/15;
         else mvspeed += global.playerballspeed/5;
      };
      moving_direction = 270;
   }
   if (CheckKeyPress(MOVELEFT)) then
   {
      if (global.morphed = false) 
      {
         if (global.onice) mhspeed -= global.playersuitspeed/15;
         else mhspeed -= global.playersuitspeed/5;
      }
      if (global.morphed = true) 
      {
         if (global.onice) mhspeed -= global.playerballspeed/15;
         else mhspeed -= global.playerballspeed/5;
      }
      moving_direction = 180;
   }
   if (CheckKeyPress(MOVERIGHT)) then
   {
      if (global.morphed = false) 
      {
         if (global.onice) mhspeed += global.playersuitspeed/15;
         else mhspeed += global.playersuitspeed/5;
      }
      if (global.morphed = true) 
      {
         if (global.onice) mhspeed += global.playerballspeed/15;
         else mhspeed += global.playerballspeed/5;
      }
      moving_direction = 0;
   }
   /*if (global.morphed = false)
   and (global.jetboostavail = true) then
   {
      if (CheckKeyPressed(MOVEUP)) then
      {
         if (dashuptimer &gt; 0)
         and (dashedup = 0)
         and (dasheddown = 0)
         and (dashedleft = 0)
         and (dashedright = 0)
         and (justdashed = 0) then
            { sound_play(JetBoost); dashedup = 1; justdashed = global.jetboostdelay; }
         else 
            { dashuptimer = 20; dashdowntimer = 0; dashlefttimer = 0; dashrighttimer = 0; }
      }
      if (CheckKeyPressed(MOVEDOWN)) then
      {
         if (dashdowntimer &gt; 0)
         and (dashedup = 0)
         and (dasheddown = 0)
         and (dashedleft = 0)
         and (dashedright = 0)
         and (justdashed = 0) then
            { sound_play(JetBoost); dasheddown = 1; justdashed = global.jetboostdelay; }
         else 
            { dashuptimer = 0; dashdowntimer = 20; dashlefttimer = 0; dashrighttimer = 0; }
      }
      if (CheckKeyPressed(MOVELEFT)) then
      {
         if (dashlefttimer &gt; 0)
         and (dashedup = 0)
         and (dasheddown = 0)
         and (dashedleft = 0)
         and (dashedright = 0)
         and (justdashed = 0) then
            { sound_play(JetBoost); dashedleft = 1; justdashed = global.jetboostdelay; }
         else 
            { dashuptimer = 0; dashdowntimer = 0; dashlefttimer = 20; dashrighttimer = 0; }
      }
      if (CheckKeyPressed(MOVERIGHT)) then
      {
         if (dashrighttimer &gt; 0)
         and (dashedup = 0)
         and (dasheddown = 0)
         and (dashedleft = 0)
         and (dashedright = 0)
         and (justdashed = 0) then
            { sound_play(JetBoost); dashedright = 1; justdashed = global.jetboostdelay; }
         else 
            { dashuptimer = 0; dashdowntimer = 0; dashlefttimer = 0; dashrighttimer = 20; }
      }
      
      if (dashedup &gt; 0) 
         { mvspeed -= global.playersuitspeed*4; image_angle = 90; }
      if (dasheddown &gt; 0) 
         { mvspeed += global.playersuitspeed*4; image_angle = 270; }
      if (dashedleft &gt; 0)
         { mhspeed -= global.playersuitspeed*4; image_angle = 180; }
      if (dashedright &gt; 0)
         { mhspeed += global.playersuitspeed*4; image_angle = 0; }
   }*/
   
   hspeed=mhspeed;
   vspeed=mvspeed;
   mspeed=speed;
   mdirection=direction;
   speed=0;
   
   if (global.homing = true)
   or (global.goback = true) 
      { speed = 0; }
   
   if (CheckKeyPress(MOVERIGHT) and CheckKeyPress(MOVEUP)) { moving_direction = 45; }
   if (CheckKeyPress(MOVEUP) and CheckKeyPress(MOVEDOWN)) { moving_direction = 135; }
   if (CheckKeyPress(MOVEDOWN) and CheckKeyPress(MOVELEFT)) { moving_direction = 225; }
   if (CheckKeyPress(MOVELEFT) and CheckKeyPress(MOVERIGHT)) { moving_direction = 315; }
}

if (global.transforming = true) speed = 0;

//mspeed = min(mspeed,maxs); 

if (!global.speedboost) mspeed = min(mspeed,maxs); 
if (global.speedboost) { mspeed = min(mspeed,1+maxs*2); }

if (!CheckKeyPress(MOVELEFT))
and (!CheckKeyPress(MOVERIGHT))
and (!CheckKeyPress(MOVEUP))
and (!CheckKeyPress(MOVEDOWN))
and (dashedup = 0)
and (dasheddown = 0)
and (dashedleft = 0)
and (dashedright = 0) then
{
   moving_direction = -1;
   if (global.onice = false) mspeed = max(mspeed*.3,0);
   else mspeed = max(mspeed*.96,0);
   if (abs(mspeed)&lt;.5) mspeed = 0;
   moving = false;
}
if moving and (global.homing or global.goback)
{
   moving_direction = -1;
   if (global.onice = false) mspeed = max(mspeed*.3,0);
   else mspeed = max(mspeed*.96,0);
   if (abs(mspeed)&lt;.5) mspeed = 0;
   moving = false;
}

mhspeed=lengthdir_x(mspeed,mdirection)
mvspeed=lengthdir_y(mspeed,mdirection)

if (CheckKeyPress(KEYALT)) and (global.morphed = false) and (global.missilelauncheravail = true)
{
   global.weapon = global.secweapon;
   if (!instance_exists(objSecWeaponSel)) instance_create(x,y,objSecWeaponSel);
}
else global.weapon = global.primweapon;

if (CheckKeyPressed(KEYALT)) and (global.morphed = false) and (global.missilelauncheravail = true)
{
   global.justswitchedweapon = true;
   gunready = false;
   novaready = false;
   sound_play(ChangeSecWeaponOn);
   alarm[0] = 5;
}
if (CheckKeyReleased(KEYALT)) and (global.morphed = false) and (global.missilelauncheravail = true)
{
   global.justswitchedweapon = true;
   gunready = false;
   novaready = false;
   sound_play(ChangeSecWeaponOff);
   alarm[0] = 5;
}

/*if CheckKeyPressed(KEYALT)
{
   if CheckKeyPressed(POWERBEAM) ChangePlayerWeapon(11);
   if CheckKeyPressed(WAVEBEAM) ChangePlayerWeapon(12);
   if CheckKeyPressed(PLASMABEAM) ChangePlayerWeapon(13);
   if CheckKeyPressed(SPAZERBEAM) ChangePlayerWeapon(14);
   if CheckKeyPressed(PULSEBEAM) ChangePlayerWeapon(15);
   if mouse_wheel_up() SecondaryWeaponScroll();
   if mouse_wheel_down() SecondaryWeaponScroll(true);
}*/
/*else
{*/
   if (!CheckKeyPress(KEYALT)) then
   {
      if CheckKeyPressed(POWERBEAM) ChangePlayerWeapon(1);
      if CheckKeyPressed(WAVEBEAM) ChangePlayerWeapon(2);
      if CheckKeyPressed(PLASMABEAM) ChangePlayerWeapon(3);
      if CheckKeyPressed(SPAZERBEAM) ChangePlayerWeapon(4);
      if CheckKeyPressed(PULSEBEAM) ChangePlayerWeapon(5);
      if CheckKeyPressed(ICEBEAM) ChangePlayerWeapon(6);
      if CheckKeyPressed(NOVABEAM) ChangePlayerWeapon(7);
      if CheckKeyPressed(DARKBEAM) ChangePlayerWeapon(8);
      if CheckKeyPressed(LIGHTBEAM) ChangePlayerWeapon(9);
      if CheckKeyPressed(PHAZONBEAM) ChangePlayerWeapon(10);
   }
   //if mouse_wheel_up() PrimaryWeaponScroll();
   //if mouse_wheel_down() PrimaryWeaponScroll(true);
//}

if (CheckKeyPressed(LIGHTSEAR)
or (mouse_check_button_pressed(mb_middle)))
and (global.lightsearcharge = 100)
and (global.lightsearavail)
and (global.transforming = false)
and (global.morphed = false)
and (global.cursor != 2) then
{
   instance_create(x,y,objLightsearCreate);
   global.lightsearcharge = 0;
   alarm[10] = 100;
}

if (mouse_check_button(mb_left)) and !(mouse_check_button(mb_right)) FireRegular();
if (mouse_check_button(mb_right)) and (global.morphed = false) /*and !(mouse_check_button(mb_left))*/ ChargeUp();
if (mouse_check_button_pressed(mb_right)) and (global.morphed = true) FireBomb();
if (mouse_check_button_released(mb_right)) and (global.morphed = false) then
{
   if (global.charge &gt;= 60) FireCharge();
   else FireCharge();
}
if (mouse_check_button_released(mb_left))
{
    pulseshot = 0;
    novaready = true;
    bombready = true;
}
//if (mouse_check_button_released(mb_left)) bombready = true;

if (global.weapon = 3)
or (global.weapon = 6)
or (global.weapon = 13)
or (global.weapon = 14) then
   { secondary = true; }
else
   { secondary = false; }

Ax = x + lengthdir_x(4, image_angle + 90);
Ay = y + lengthdir_y(4, image_angle + 90);
Bx = x + lengthdir_x(4, image_angle - 90);
By = y + lengthdir_y(4, image_angle - 90);
if (moving = true)
and (global.morphed = false) then
{
   if (image_index = 2) and (canstep) then
   {
      with (instance_create(Ax,Ay,objPlayerFootstep))
      { 
         //if (FootInsideTile) instance_destroy();
         image_angle = objPlayer.image_angle;
      }
      canstep = false;
      alarm[7] = 2;
   }
   if (image_index = 8) and (canstep) then
   {
      with (instance_create(Bx,By,objPlayerFootstep))
      { 
         //if (FootInsideTile) instance_destroy();
         image_angle = objPlayer.image_angle;
      }
      canstep = false;
      alarm[7] = 2;
   }
}

if (global.transforming = true)
or (global.homing = true)
or (global.goback = true)
    { moving = false; }

if (moving = true)
and (global.transforming = false) then
{
   if (global.morphed = false) then
   {
      /*if (dashedup = 0)
      and (dasheddown = 0)
      and (dashedleft = 0)
      and (dashedright = 0)
      {*/
         switch (global.suit)
         {
            case 1: sprite_index = sprPlayerVariaMoving; break;
            case 2: sprite_index = sprPlayerGravityMoving; break;
            case 3: sprite_index = sprPlayerPhazonMoving; break;
            case 4: sprite_index = sprPlayerCorruptionMoving; break;
         }
      /*}
      else
      {
         switch (global.suit)
         {
            case 1: sprite_index = sprPlayerVariaDash; break;
            case 2: sprite_index = sprPlayerGravityDash; break;
            case 3: sprite_index = sprPlayerPhazonDash; break;
            case 4: sprite_index = sprPlayerCorruptionDash; break;
         }
      }*/
      
   }
   if (global.morphed = true) then
   {
      switch (global.suit)
      {
         case 1: sprite_index = sprPlayerMorphBallVaria; image_speed = .75; break;
         case 2: sprite_index = sprPlayerMorphBallGravity; image_speed = 1; break;
         case 3: sprite_index = sprPlayerMorphBallPhazon; image_speed = .75; break;
         case 4: sprite_index = sprPlayerMorphBallCorruption; image_speed = 2; break;
      }
   }
}
if (moving = false) then
{
   if (global.morphed = false) then
   {
      switch (global.suit)
      {
         case 1:
            sprite_index = sprPlayerVaria; break;
         case 2:
            sprite_index = sprPlayerGravity; break;
         case 3:
            sprite_index = sprPlayerPhazon; break;
         case 4:
            sprite_index = sprPlayerCorruption; break;
      }
   }
   if (global.morphed = true) then
   {
      switch (global.suit)
      {
         case 1:
            sprite_index = sprPlayerMorphBallVaria; image_speed = 0; break;
         case 2:
            sprite_index = sprPlayerMorphBallGravity; image_speed = 0; break;
         case 3:
            sprite_index = sprPlayerMorphBallPhazon; image_speed = 0; break;
         case 4:
            sprite_index = sprPlayerMorphBallCorruption; image_speed = 0; break;
      }
   }
}

if (instance_exists(objPlayerKnockback))
and (!global.speedboost) then
{
   speed=0;
   motion_add(point_direction(x,y,objPlayerKnockback.x,objPlayerKnockback.y),-4);
   mhspeed+=hspeed;
   mvspeed+=vspeed;
   speed=0;
   mspeed=point_distance(0,0,mhspeed,mvspeed)
   mdirection=point_direction(0,0,hspeed,vspeed);
}
if (overheated = false) 
and (global.overheat &gt; 0) then
{
    global.overheat -= .1+((global.accel/10)*3)
    if (global.overheat &lt;= 0) global.overheat = 0;
}
else
if (overheated = true) then
{
    global.overheat -= .2+((global.accel/10)*4)
    if (global.overheat &lt;= 0) { global.overheat = 0; overheated = false; }
}
if (global.overheat = 0) overheated = false;
if (global.overheat &gt;= 100) 
and (!overheated) then
{
   global.overheat = 100;
   overheated = true;
   if (!instance_exists(objPlayerOverheating)) instance_create(x,y,objPlayerOverheating);
}

if (global.transforming = false)
and (global.morphed = false)
/*and (dashedup = 0)
and (dasheddown = 0)
and (dashedleft = 0)
and (dashedright = 0)*/ then
{
   var d;
   d=point_direction(x,y,mouse_x,mouse_y);
   direction = d // set direction to the mouse
   aim = direction// set aim to direction
   image_angle=(image_angle+(sin(degtorad(aim-image_angle))*global.playerturnspeed));
   //var DiffDir;
   //DiffDir=point_direction(x,y,mouse_x,mouse_y)-image_angle;
   //if abs(DiffDir)&lt;=180 image_angle+=median(-global.playerturnspeed,global.playerturnspeed,DiffDir) else image_angle+=median(-global.playerturnspeed,global.playerturnspeed,DiffDir-sign(DiffDir)*360);
}
if (global.transforming = false) and (global.morphed = true) and (moving = true) image_angle = direction; 

if (global.speedboost) and (!instance_exists(objSpeedBoosterEffect)) instance_create(x,y,objSpeedBoosterEffect);
if (!global.speedboost) and (instance_exists(objSpeedBoosterEffect)) { with (objSpeedBoosterEffect) instance_destroy(); }

//if (global.speedboost) and (!instance_exists(objSpeedBoosterEffect)) instance_create(x,y,objSpeedBoosterEffect);

if (flash_timer &gt; 0) hurtable = false;
else hurtable = true;

if (global.transforming = false) move_step_ext(x+mhspeed,y+mvspeed,sign(delta_angle)*min(1,abs(delta_angle)),BlockParent);
speed = 0;

/*if (dashuptimer &gt; 0) dashuptimer -= 1;
if (dashdowntimer &gt; 0) dashdowntimer -= 1;
if (dashlefttimer &gt; 0) dashlefttimer -= 1;
if (dashrighttimer &gt; 0) dashrighttimer -= 1;
if (dashedup &gt; 0) dashedup -= global.jetboostdura;
if (dasheddown &gt; 0) dasheddown -= global.jetboostdura;
if (dashedleft &gt; 0) dashedleft -= global.jetboostdura;
if (dashedright &gt; 0) dashedright -= global.jetboostdura;
if (justdashed &gt; 0) justdashed -= 1;*/

if (instance_exists(BombSlotParent)) then
{
   if (point_distance(x,y,instance_nearest(x,y,BombSlotParent).x,instance_nearest(x,y,BombSlotParent).y) &lt; 7)
   and (instance_nearest(x,y,BombSlotParent).active = true) then
   {
      if (global.morphed) and (global.bombavail) then
      {
         global.inslot = true;
         global.xx = x;
         global.yy = y;
         mhspeed = 0;
         mvspeed = 0;
         mspeed = 0;
         speed = 0;
         switch (instance_nearest(x,y,BombSlotParent).sprite_index)
         {
            case sprBombSlotD:
               x = instance_nearest(x,y,BombSlotParent).x;
               y = instance_nearest(x,y,BombSlotParent).y+7;
               break;
            case sprBombSlotL:
               x = instance_nearest(x,y,BombSlotParent).x-7;
               y = instance_nearest(x,y,BombSlotParent).y;
               break;
            case sprBombSlotR:
               x = instance_nearest(x,y,BombSlotParent).x+7;
               y = instance_nearest(x,y,BombSlotParent).y;
               break;
            case sprBombSlotU:
               x = instance_nearest(x,y,BombSlotParent).x;
               y = instance_nearest(x,y,BombSlotParent).y-7;
               break;
         }
         with (instance_nearest(x,y,BombSlotParent)) inside = true;
      }
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ZoomerParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PlayerDamage(6,6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="PirateParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PlayerDamage(6,6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="GametParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PlayerDamage(9,9);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPirateBlast">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PlayerDamage(5,5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objParasite">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PlayerDamage(3,3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MessageCheckDepth();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.speedboost)
{
   var xx1, yy1,
       xx2, yy2,
       xx3, yy3,
       xx4, yy4,
       xx5, yy5,
       len, dir,
       col1, col2, col3, col4, col5;
       
   len = 8;
   dir = point_direction(x,y,xprevious,yprevious);
   
   col1 = make_color_rgb(102,179,255);
   col2 = make_color_rgb(28,141,255);
   col3 = make_color_rgb(0,88,176);
   col4 = make_color_rgb(0,65,130);
   col5 = make_color_rgb(0,36,72);
   
   xx1 = lengthdir_x(len,dir);
   yy1 = lengthdir_y(len,dir);
   xx2 = lengthdir_x(len*2,dir);
   yy2 = lengthdir_y(len*2,dir);
   xx3 = lengthdir_x(len*3.5,dir);
   yy3 = lengthdir_y(len*3.5,dir);
   xx4 = lengthdir_x(len*5.5,dir);
   yy4 = lengthdir_y(len*5.5,dir);
   xx5 = lengthdir_x(len*8,dir);
   yy5 = lengthdir_y(len*8,dir);
   draw_sprite_ext(sprite_index,image_index-1,x+xx1,y+yy1,1,1,image_angle,col1,.75);
   draw_sprite_ext(sprite_index,image_index-2,x+xx2,y+yy2,1,1,image_angle,col2,.6);
   draw_sprite_ext(sprite_index,image_index-3,x+xx3,y+yy3,1,1,image_angle,col3,.45);
   draw_sprite_ext(sprite_index,image_index-4,x+xx4,y+yy4,1,1,image_angle,col4,.3);
   draw_sprite_ext(sprite_index,image_index-5,x+xx5,y+yy5,1,1,image_angle,col5,.15);
   // ---
   draw_sprite_ext(objPlayerCannon.sprite_index,objPlayerCannon.image_index,x+xx1,y+yy1,1,1,objPlayerCannon.image_angle,col1,.75);
   draw_sprite_ext(objPlayerCannon.sprite_index,objPlayerCannon.image_index,x+xx2,y+yy2,1,1,objPlayerCannon.image_angle,col2,.6);
   draw_sprite_ext(objPlayerCannon.sprite_index,objPlayerCannon.image_index,x+xx3,y+yy3,1,1,objPlayerCannon.image_angle,col3,.45);
   draw_sprite_ext(objPlayerCannon.sprite_index,objPlayerCannon.image_index,x+xx4,y+yy4,1,1,objPlayerCannon.image_angle,col4,.3);
   draw_sprite_ext(objPlayerCannon.sprite_index,objPlayerCannon.image_index,x+xx5,y+yy5,1,1,objPlayerCannon.image_angle,col5,.15);
}

if (global.speedboost)
   { repeat (2) draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle,make_color_rgb(254,254,254),1); }
else draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle,c_white,1);
if (flash_timer mod 2) and (flash_timer &gt; 0) then
{
   draw_set_blend_mode(bm_add);
   draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle,make_color_rgb(254,254,254),1);
   draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle,make_color_rgb(254,254,254),1);
   draw_set_blend_mode(bm_normal);
}
if (!instance_exists(objPlayerFeet)) instance_create(x,y,objPlayerFeet);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
