<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lighttype = 0;
xx = 0;
yy = 0;
objangle = 0;
alarm[1] = 2;
switch (object_index)
{
   case LightSmall:
   case objFloorLightLR:
   case objFloorLightUD:
      rad = 10;
      fluc = 1;
      flucrate = 0;
      brightness = .7;
      xx = 0;
      yy = 0;
      break;
   case LightMedium:
   case objPathLight:
   case objSmallWallLightD:
   case objSmallWallLightL:
   case objSmallWallLightR:
   case objSmallWallLightU:
      rad = 13;
      fluc = 1;
      flucrate = 0;
      brightness = .7;
      xx = 0;
      yy = 0;
      break;
   case LightLarge:
   case objWallLightD:
   case objWallLightL:
   case objWallLightR:
   case objWallLightU:
      rad = 17;
      fluc = 1;
      flucrate = 0;
      brightness = .7;
      xx = 0;
      yy = 0;
      break;
   case objStickLightD:
   case objStickLightL:
   case objStickLightR:
   case objStickLightU:
      image_angle = choose(340,345,350,355,0,5,10,15,20);
      rad = 20;
      fluc = 1;
      flucrate = 0;
      brightness = .8;
      if (object_index = objStickLightD) objangle = 270;
      if (object_index = objStickLightL) objangle = 180;
      if (object_index = objStickLightR) objangle = 0;
      if (object_index = objStickLightU) objangle = 90;
      xx = lengthdir_x(global.sticklightoffset,image_angle+objangle);
      yy = lengthdir_y(global.sticklightoffset,image_angle+objangle);
      /*
      if (object_index = objStickLightD)
      or (object_index = objStickLightU) xx = 0;
      if (object_index = objStickLightL)
      or (object_index = objStickLightR) xx = lengthdir_x(global.sticklightoffset,image_angle);
      if (object_index = objStickLightL)
      or (object_index = objStickLightR) yy = 0;
      if (object_index = objStickLightD)
      or (object_index = objStickLightU) yy = lengthdir_y(global.sticklightoffset,image_angle);
      */
      break;
}
alarm[0] = 5;
up = true;
baserad = rad;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if collision_point(x+xx,y+yy,objHideMap,true,true) lighttype = 2;
else lighttype = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (flucrate = 0) exit;

if (rad &lt; baserad+fluc) and (up) then
{ 
   rad += flucrate; 
   if (rad = baserad+fluc) up = false;
}
if (rad &gt; baserad-fluc) and (!up) then
{
   rad -= flucrate;
   if (rad = baserad-fluc) up = true;
}
alarm[0] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (lighttype)
{
   case 1:
      //LightCircle(x+xx,y+yy,rad,brightness);
      LightCircle(x+xx,y+yy,rad*4,brightness/2);
      LightCircle(x+xx,y+yy,rad*4+30,brightness/8);
      break;
   case 2:
      //if (global.reveal)
      //{
         RevealCircle(x+xx,y+yy,rad*6,global.hiddenfade);
         RevealCircle(x+xx,y+yy,rad*6*40,.75*global.hiddenfade);
         LightCircle(x+xx,y+yy,rad*2,global.hiddenfade/8);
         LightCircle(x+xx,y+yy,rad*2+15,global.hiddenfade/9);
      //}
      break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (visible) draw_self();
if (global.debugmode)
{
   draw_set_font(Default);
   draw_set_color(c_black);
   draw_text(x+7,y-7,lighttype);
   draw_text(x+7,y-22,xx);
   draw_text(x+7,y-32,yy);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
