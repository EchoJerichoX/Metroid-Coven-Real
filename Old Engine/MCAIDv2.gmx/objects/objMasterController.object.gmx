<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1400</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cursor_sprite = blank;
scantogready = true;
diego = true;
if (instance_exists(objPlayer)) then
{
   x = objPlayer.x;
   y = objPlayer.y;
}
col = make_color_rgb(0,0,0);
flashup = true;
flashdown = false;
flashc = 0;
InitLocalMap();
malpha = 0;
updatemap = false;
alarm[5] = 20;
alarm[6] = 1;
alarm[7] = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.deacready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>updatemap = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(objPlayerStill)) global.canpause = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.canhypermode = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.charge = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.fullscreentog = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(DeadRoom);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.playerJustDied = true) then
{
   health = 100;
   global.etanks = global.maxetanks;
   global.playerJustDied = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(PlayerParent)) then
   { x = PlayerParent.x; y = PlayerParent.y; }
if (x &gt;= room_width) x = room_width-1;
if (y &gt;= room_height) y = room_height-1;
if (x &lt;= 0) x = 0;
if (y &lt;= 0) y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/////////////////////////////////////////////
/////////////////////////////////////////////
//// -- MASTER CONTROLLER STEP SCRIPT -- ////
/////////////////////////////////////////////
/////////////////////////////////////////////
// DEACTIVATION LIST //
///////////////////////
if (global.deacready)
{
instance_activate_all();
Deac(objPhazon1);
Deac(objFrostgrass);
Deac(objDayblade);
// ---
Deac(objBasicBlock16);
Deac(objReformBlock16);
Deac(objMissileBlock16);
Deac(objSuperMissileBlock16);
Deac(objBombBlock16);
Deac(objPowerBombBlock16);
Deac(objSpeedBoosterBlock16);
// ---
Deac(objBasicBlock8);
Deac(objReformBlock8);
Deac(objMissileBlock8);
Deac(objSuperMissileBlock8);
Deac(objBombBlock8);
Deac(objPowerBombBlock8);
Deac(objSpeedBoosterBlock8);
// ---
Deac(SpawnParent);
Deac(TransParent);
Deac(JunkParent);
Deac(ScanParent);
}

/////////////
// GENERAL //
/////////////
if (instance_exists(objPlayer)) then
{
   x = objPlayer.x;
   y = objPlayer.y;
}
if (mouse_check_button(mb_right)) global.charging = true;
else global.charging = false;
if (global.charging = false) and (global.chargeshooting = false) then 
{
   global.charge = 0;
   if (sound_isplaying(ChargeStart)) sound_stop(ChargeStart);
   if (sound_isplaying(ChargeLoop)) sound_stop(ChargeLoop);
}
if (diego) and (instance_exists(objPlayerDieExpl)) { alarm[1] = 150; diego = false; }
if (global.missiles &gt;= global.maxmissiles) global.missiles = global.maxmissiles;
if (global.supermissiles &gt;= global.maxsupermissiles) global.supermissiles = global.maxsupermissiles;
if (health &gt; global.maxhealth) health = global.maxhealth;
if (global.etanks &gt; global.maxetanks) global.etanks = global.maxetanks;
if (global.lightsearcharge &lt; 100) global.lightsearcharge += 1;
if (global.lightsearcharge &gt;= 100) global.lightsearcharge = 100;
if (global.mouselocked)
{
   if (mouse_x &lt; view_xview) window_views_mouse_set(view_xview,mouse_y);
   if (mouse_y &lt; view_yview) window_views_mouse_set(mouse_x,view_yview);
   if (mouse_x &gt; view_xview+view_wview) window_views_mouse_set(view_xview+view_wview,mouse_y);
   if (mouse_y &gt; view_yview+view_hview) window_views_mouse_set(mouse_x,view_yview+view_hview); 
}
if (global.playlowhealthsnds = 0)
{
    if (sound_isplaying(LowOne)) sound_stop(LowOne);
    if (sound_isplaying(LowTwo)) sound_stop(LowTwo);
}
if (global.playscansound = 0) 
    { if (sound_isplaying(ScanAmbience)) sound_stop(ScanAmbience); }
//if (global.mutemusic = 1) if (sound_isplaying(global.currentmusic)) sound_stop(global.currentmusic);
//if (global.mutemusic = 0) if !(sound_isplaying(global.currentmusic)) sound_loop(global.currentmusic);
if (global.interpolate = 1) texture_set_interpolation(true);
if (global.interpolate = 0) texture_set_interpolation(false);
if (room_speed != global.framerate) room_speed = global.framerate;


////////////////////////
// PLAYER SUIT SPEEDS //
////////////////////////
switch (global.suit)
{
   case 1: //Varia
   case 3: //Phazon
      if (global.inwater = true) then
      {
         global.playersuitspeed = 1;
         global.playerballspeed = 2;
      }
      if (global.inwater = false) then
      {
         global.playersuitspeed = 2;
         global.playerballspeed = 3;
      }
      break;
   case 2: //Gravity
      global.playersuitspeed = 2;
      global.playerballspeed = 4;
      break;
   case 4: //Corruption
      global.playersuitspeed = 2;
      global.playerballspeed = 3;
      break;
}
switch (global.weapon)
{
    case 0:
        global.weaponspeed = 0; break;
    case 1:
        global.weaponspeed = global.powerbeamspd; break;
    case 2:
    case 4:
        global.weaponspeed = global.waveplasmabeamspd; break;
    case 3:
    case 11:
        global.weaponspeed = global.lightbeamspd; break;
    case 5:
        global.weaponspeed = global.spazerbeamspd; break;
    case 6:
    case 14:
        global.weaponspeed = 40; break;
    case 7:
        global.weaponspeed = global.pulsebeamspd; break;
    case 8:
    case 10:
        global.weaponspeed = global.icedarkbeamspd; break;
    case 9:
        global.weaponspeed = global.novabeamspd;
        if (instance_exists(objPlayer)) objPlayer.gunready = true;
        break;
    case 13:
        global.weaponspeed = "X"; break;
    case 12:
        global.weaponspeed = global.phazonbeamspd; break;
    case 15:
    case 16:
        global.weaponspeed = 200; break;
}

/////////////////////
// GLOBAL CONTROLS //
/////////////////////
if (CheckKeyPressed(TOGGLEMOUSELOCK)) then
{
   if (global.mouselocked = false) global.mouselocked = true;
   else global.mouselocked = false;
}
if (keyboard_check_released(ord('F'))) then
{
   if (global.viewshift = false) global.viewshift = true;
   else global.viewshift = false;
}
if (keyboard_check_pressed(vk_escape))
and (global.curroom != 9999999)
{
   with (instance_create(x,y,messageGen))
   {
      setexit = 1;
      text = "Do you really want to quit?#-Enter- for yes.     -Escape- for no.";
   }   
}
if (CheckKeyPressed(TOGGLEZOOM)) then
{
    if (global.fullscreen = 0) then
    {
       if (global.windowscale = 1) global.windowscale = 1.5;
       else global.windowscale = 1;
       window_set_region_scale(global.windowscale,true);
       window_center();
    }
}
if (CheckKeyPressed(TOGGLEFULLSCREEN)) then
{
    if (global.fullscreentog) and (global.fullscreen = 1) then
    {
       window_set_fullscreen(0);
       window_set_region_scale(global.windowscale,true);
       window_center();
       global.fullscreen = 0;
       global.fullscreentog = false;
    }
    if (global.fullscreentog) and (global.fullscreen = 0) then
    {
       window_set_fullscreen(1);
       window_set_region_scale(-1,false);
       global.fullscreen = 1;
       global.fullscreentog = false;
    }
}
if (CheckKeyReleased(TOGGLEFULLSCREEN)) global.fullscreentog = true;
if (keyboard_check(vk_shift))
and (keyboard_check(vk_control))
and (keyboard_check_pressed(ord('Z')))
and (global.debugenabled) global.debugmode = !global.debugmode;

////////////////////////
// HEALTH ADJUSTMENTS //
////////////////////////
if (global.gainhealth &gt; 0)
   { health += 1; global.gainhealth -= 1; }
if (health &gt; 100) then
{
    global.etanks += 1;
    if (global.etanks &gt; global.maxetanks) global.etanks = global.maxetanks;
    if (global.etanks &lt; global.maxetanks) health -= 100;
    else health = 100;
}
if (health &lt; 30)
and (health &gt; 19)
and (global.etanks = 0) 
and (!sound_isplaying(LowOne)) then
{
   sound_loop(LowOne);
   if (sound_isplaying(LowTwo)) sound_stop(LowTwo);
}
if (health &lt; 20)
and (health &gt; 0)
and (global.etanks = 0) 
and (!sound_isplaying(LowTwo)) then
{
   sound_loop(LowTwo);
   if (sound_isplaying(LowOne)) sound_stop(LowOne);
}
if (health &gt; 29)
and (global.etanks = 0) then
{
   if (sound_isplaying(LowTwo)) sound_stop(LowTwo);
   if (sound_isplaying(LowOne)) sound_stop(LowOne);
}

///////////
// OTHER //
///////////
UpdateMap();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//////////////////////////////////////////
//////////////////////////////////////////
////// MASTER INITIALIZATION SCRIPT //////
//////////////////////////////////////////
//////////////////////////////////////////

/////////////////////////////
/////////////////////////////
//// INITIALIZE CONTROLS ////
/////////////////////////////
/////////////////////////////
// Not separating this //
// script. They all    //
// run off each other. //
/////////////////////////
KeyControlInitialize();

/////////////////////////////////
/////////////////////////////////
//// INITIALIZE SCAN HISTORY ////
/////////////////////////////////
/////////////////////////////////
// Morphology //
////////////////
global.violascanned = false;
global.violafastscanned = false;
global.zoomerscanned = false;
global.turretscanned = false;
global.gametscanned = false;
global.zoombotscanned = false;
global.wallfirescanned = false;
global.ripperscanned = false;
global.spacepiratescanned = false;
global.parasitescanned = false;
global.bombuscanned = false;
global.beetlescanned = false;
global.wavehopperscanned = false;
global.cacatacscanned = false;
//////////////
// Research //
//////////////
// ---- Doors.
global.bluedoorscanned = false;
global.reddoorscanned = false;
global.greendoorscanned = false;
global.purpledoorscanned = false;
global.yellowdoorscanned = false;
global.darkpurpledoorscanned = false;
global.bossdoorscanned = false;
global.sealeddoorscanned = false;
// ---- Generators
global.largegeneratorscanned = false;
global.generatorscanned = false;
global.smallgeneratorscaneed = false;
// --- Other.
global.bombslotscanned = false;
global.bombslotdoorscanned = false;
global.samusshipscanned = false;
global.bombblockscanned = false;
global.energystationscanned = false;
global.weaponstationscanned = false;
global.itemcasescanned = false;
/////////////////
// Environment //
/////////////////
global.smallicescanned = false;
global.largeicescanned = false;
global.frostgrassscanned = false;
global.daybladescanned = false;
/////////////////////////
// Lore (Not Yet Used) //
/////////////////////////
// -- Space Pirate.
global.piratelore1scanned = false;
// ---- Planets.
// -- Raelis.
global.raelislore1scanned = false;
global.raelislore2scanned = false;
// -- SR619.
global.sr619lore1scanned = false;

//////////////////////////////
//////////////////////////////
//// INITIALIZE SCAN DATA ////
//////////////////////////////
//////////////////////////////
// - GENERAL SCANS -//
//////////////////////
// AI Demo v2.0 //
//////////////////
global.scan1 = "Most of the game's scans will be found on computers, wall terminals and other objects of interest. You should look for them frequently.##As in Metroid Prime, most of the story, research, morphologies, logs and other related information will be gathered via scans, while remaining entirely optional. Check these scans all throughout the demo to gather more project information.";
global.scan2 = "While there may be a ton of weapons in this game, they all serve a specific purpose. This means that they each are used to bypass a certain obstacle, flip a certain switch, destroy a certain obstruction or are simply made to suit a better combat situation. However, the primary reason there are so many weapons in the game is personalization.##The idea is to use the weapon you like the most, since they are intended to be well-balanced. Despite that, it will follow (to some degree) the typical Metroid sequence, where the weapons found later in the game are more effective in general.";
global.scan3 = "Please send your feedback, bug reports, and other related comments to echojerichox@metroidcoven.com, EchoJerichoX at the official site, Starmen.net forums, GMC forums or on Steam, or on Windows Live Messenger under the email darkfox@wavecable.com. Every bit of feedback and reporting is fully noted.";
global.scan4 = "Weapons aside, you may have noticed that there are four different suits in the game. They serve a similar purpose to the weapons. It comes down to preference.##The Varia Suit is your all-around average suit, with decent speed and power. However, you can trade some speed for power with the Phazon Suit. Or you can go the other way around and use the Gravity Suit, granting incredible speed, but little power.##At the same time, each suit is used to bypass a certain obstacle. For example, water and acid will require you to use the Gravity Suit to cross. Meanwhile, you might want the Phazon Suit for trekking through environmental Phazon hazards. The Corruption suit is meant to be obtained close to the end of the game, embodying all of the suits' abilities.";
global.scan5 = "Want to join the team, and/or contribute? Go to the project's official website, www.metroidcoven.com, and go to the Team Recruitment page for more information. We take all team applications seriously and need as many people as we can get! Don't be shy!";
global.scan6 = "While Metroid Coven will retain much of the Metroid feel, it is still up in the air as to whether or not it will retain the level of difficulty that the other games do. We feel that it may be more beneficial to the project to stick to the sequencing and progression of the Prime games, with occasional hints and directions as to where the player should go next.##On the other hand, it has been thought that the game should retain the classic exploration factor that the old games had, with you feeling like a rat in a maze. However, we believe that it is in the best interest of the project to broaden the level of play and our demographic to people who are looking for more satisfying and rewarding gameplay, rather than making them earn their success.##Ideas are tossed around frequently to see how we can meet the best of both worlds.";
global.scan7 = "This game has been created well within legal bounds. Extensive research has shown that most games nowadays do not receive Cease and Desist notices when they cause no harm to the original designers. No monetary gain is made from this game, and all of the paid services are paid out of pocket or from LEGALLY solicited donations. Not only that, but the copyrighted material used is not being used commercially, and NO money is being made off of this project in any way, shape or form.##Legally speaking, a donation for such a project is fully legal if the money's use is disclosed as a result of the solicitation.";
global.scan8 = "Feel free to look us up on www.8bitfunding.com to donate! Every penny given allows us to purchase new software, hardware and means of developing the game. Donators who give $5 or more gain access to a special perk, described in detail on the 8-Bit Funding article.";
///////////
// Other //
///////////
global.samusscan = "This is you. Samus Aran, the galactic bounty hunter of legend.##Samus was born on a mining colony, designated K-2L. However, when her family was killed and the station was destroyed by a well-known, high-ranking Space Pirate, Ridley, the Chozo race took her under their wing, bestowing upon her their crown jewel of technology - the Power Suit. From then on, Samus trained and fought to become a legendary intergalactic Bounty Hunter.##For a time, Samus worked for the Galactic Federation, but she has since moved on, realizing their sometimes twisted ways. She now fights for the good of the galaxy, hunting the most notorious bounties and answering the various unheard distress beacons throughout the universe.";
//////////////////
// - RESEARCH - //
//////////////////
// Doors //
///////////
global.depowereddoorscan = "This hatch is not recieving power. It is impassable.";
// ---
global.sealeddoorscan1 = "This is a sealed hatch. The blast shield is impenetrable. The only way to deactivate a blast shield is to destroy the connected generator. Doing so will overload the shield and destroy it permanently.";
global.sealeddoorscan2 = "- Research entry added. -##This is a sealed hatch. The blast shield is impenetrable. The only way to deactivate a blast shield is to destroy the connected generator. Doing so will overload the shield and destroy it permanently.";
// ---
global.bluedoorscan1 = "This is a blue hatch. The shield can be destroyed by any weaponry.";
global.bluedoorscan2 = "- Research entry added. -##This is a blue hatch. The shield can be destroyed by any weaponry.";
// ---
global.wavebeamdoorscan1 = "This is a purple hatch. The unique shield on purple hatches deflects beam weaponry. Electricity-based weaponry could overload it.";
global.wavebeamdoorscan2 = "- Research entry added. -##This is a purple hatch. The unique shield on purple hatches deflects beam weaponry. Electricity-based weaponry could overload it.";
// ---
global.darkbeamdoorscan1 = "This is a dark purple hatch. The unique shield on dark purple hatches deflects beam weaponry. Dark-based weaponry could overload it.";
global.darkbeamdoorscan2 = "- Research entry added. -##This is a dark purple hatch. The unique shield on dark purple hatches deflects beam weaponry. Dark-based weaponry could overload it.";
// ---
global.reddoorscan1 = "This is a red hatch. Openable only by a series of three concussive blasts, you need some moderate firepower to gain access. No beam can pierce a red hatch.";
global.reddoorscan2 = "- Research entry added. -##This is a red hatch. Openable only by a series of three concussive blasts, you need some moderate firepower to gain access. No beam can pierce a red hatch.";
// ---
global.greendoorscan1 = "This is a green hatch. Openable only by a massive concussive blast, you need high firepower to gain access. No beam can pierce a green hatch.";
global.greendoorscan2 = "- Research entry added. -##This is a green hatch. Openable only by a massive concussive blast, you need high firepower to gain access. No beam can pierce a green hatch.";
// ---
global.yellowdoorscan1 = "This is a yellow hatch. Only openable with the concussive blast from a Power or Screw Bomb, this door is impervious to all other weapons-fire.";
global.yellowdoorscan2 = "- Research entry added. -##This is a yellow hatch. Only openable with the concussive blast from a Power or Screw Bomb, this door is impervious to all other weapons-fire.";
/////////////
// Pickups //
/////////////
global.energysmallscan = "This is a small energy unit. Contains 10 units of energy."
global.energymediumscan = "This is a medium energy unit. Contains 20 units of energy."
global.energylargescan = "This is a large energy unit. Contains 50 units of energy."
// ---
global.missilesmallscan = "This is a small missile capsule. Contains 2 missiles."
global.missilelargescan = "This is a large missile capsule. Contains 5 missiles."
global.smissilesmallscan = "This is a small Super Missile campsule. Contains 1 Super Missile."
global.smissilelargescan = "This is a large Super Missile campsule. Contains 3 Super Missiles."
global.powerbombpickupscan = "This is a Power Bomb capsule. Contains 1 Power Bomb."
///////////
// Other //
///////////
global.bombslotscan1 = "This is a standard bomb slot. This slot is active. Inserting while in Morph Ball mode and dropping a Morph Ball Bomb will energize whatever device the slot is connected to.";
global.bombslotscan2 = "- Research entry added. -##This is a standard bomb slot. This slot is active. Inserting while in Morph Ball mode and dropping a Morph Ball Bomb will energize whatever device the slot is connected to.";
global.bombslotnobombscan = "This is some sort of powered system control unit. You lack the technology to interface with this equipment.";
global.bombslotinactivescan = "This bomb slot is inactive. It cannot be used again";
// ---
global.bombslotdoorscan1 = "This is a standard bomb slot door. These doors are linked to a nearby bomb slot. When the bomb slot is used and the door is energized, both will deactivate and no longer be able to be used.";
global.bombslotdoorscan2 = "- Research entry added. -##This is a standard bomb slot door. These doors are linked to a nearby bomb slot. When the bomb slot is used and the door is energized, both will deactivate and no longer be able to be used.";
global.bombslotdoornobombscan = "This door requires a pulse of power from an unknown source to bypass. You lack the technology to interface with this equipment.";
global.bombslotdoorinactivescan = "This bomb slot door is inactive. It cannot be used again";
// ---
global.itemcasescan1 = "This is an item case. Originally, this design was used by the Chozo to hold their artifacts and equipment. Today, few real Choze item cases exist. Now, they are replicated by Space Pirates and other races due to the practical design.";
global.itemcasescan2 = "- Research entry added. -##This is an item case. Originally, this design was used by the Chozo to hold their artifacts and equipment. Today, few real Choze item cases exist. Now, they are replicated by Space Pirates and other races due to the practical design.";
////////////////////
// - MORPHOLOGY - //
////////////////////
// Flyers //
////////////
global.gametscan1 = "The Gamet is a pipe-dwelling creature native to planet Zebes. It is a common misconception that they are pipedwellers, but they really are commonly pit-dwellers. This is due to the fact that they look like other pipe-dwelling creatures with varying shell colors and snout-like downward-facing trunks. Considerably weak, they generally travel in packs of three for protection, and often hide in sand traps in the wild. In other cases, they have been known to inhabit abandoned ship ventilation systems and unused piping. Strikingly similar to Zebs and Geegas, they prove to be more versatile and powerful. There are two known variations of Gamet - Pink and red. The pink are generally even more brittle than their red superiors.";
global.gametscan2 = "- Morphology entry added. -##The Gamet is a pipe-dwelling creature native to planet Zebes. It is a common misconception that they are pipedwellers, but they really are commonly pit-dwellers. This is due to the fact that they look like other pipe-dwelling creatures with varying shell colors and snout-like downward-facing trunks. Considerably weak, they generally travel in packs of three for protection, and often hide in sand traps in the wild. In other cases, they have been known to inhabit abandoned ship ventilation systems and unused piping. Strikingly similar to Zebs and Geegas, they prove to be more versatile and powerful. There are two known variations of Gamet - Pink and red. The pink are generally even more brittle than their red superiors.";
/////////////////////
// - ENVIRONMENT - //
/////////////////////
global.largeicescan1 = "This anomaly of nature and weather is not uncommon on the planet of Raelis. Being a planet of some extremes, unusual formations of ice, rock and other surroundings are frequently found and formed over time. These ice formations are typical to the arctic regions. When only a small amount of moisture is introduced, these formations can occur.##Easily breakable with a concussive blast, these larger formations have been known to gather fair amounts of salvage and equipment when the moisture gathers.";
global.largeicescan2 = "- Environment entry added. -##This anomaly of nature and weather is not uncommon on the planet of Raelis. Being a planet of some extremes, unusual formations of ice, rock and other surroundings are frequently found and formed over time. These ice formations are typical to the arctic regions. When only a small amount of moisture is introduced, these formations can occur.##Easily breakable with a concussive blast, these larger formations have been known to gather fair amounts of salvage and equipment when the moisture gathers.";
// ---
global.frostgrassscan1 = "Frostgrass is a common plant native to Raelis, known for its hardiness and ability even to bloom in near subzero temperatures. Part of what makes the lifespan of Frostgrass so long is its lack of creatures which choose to feed on it. Only creatures native to the snowy regions may have immune systems able to resist the deadly toxins in the leaves of the Frostgrass.";
global.frostgrassscan2 = "- Environment entry added. -##Frostgrass is a common plant native to Raelis, known for its hardiness and ability even to bloom in near subzero temperatures. Part of what makes the lifespan of Frostgrass so long is its lack of creatures which choose to feed on it. Only creatures native to the snowy regions may have immune systems able to resist the deadly toxins in the leaves of the Frostgrass.";
// ---
global.daybladescan1 = "The Dayblade plant is notably found almost everywhere on Raelis. Relying almost solely on a tiny amount of solar energy to survive, the Dayblade is often mislabeled as a weed. However, it does not impact other nearby plants or grow very invasively.";
global.daybladescan2 = "- Environment entry added. -##The Dayblade plant is notably found almost everywhere on Raelis. Relying almost solely on a tiny amount of solar energy to survive, the Dayblade is often mislabeled as a weed. However, it does not impact other nearby plants or grow very invasively.";
///////////////////
// - EQUIPMENT - //
///////////////////
// Suits //
///////////
global.powersuitscan = "Samus' Power Suit is a thing of legend. A Power Suit in general is a suit of powered armor designed by the Chozo. This term applies to two things: Samus Aran's basic suit without any upgrades, and her suit as a whole regardless of its current upgrade level. This is because the term 'Power Suit' is short for 'powered armorsuit.'##The Power Suit is Samus' greatest weapon. Not just because of the protection it provides - both defensively and offensively - but because of its modular nature. Being able to take in a massive array of technologies to better itself, the biological extension of Samus that is her Power Suit allows her to become extremely powerful and make great use of seemingly useless artifacts.##Samus's Power Suit comes with a standard Power Beam and the Oxygen Supply Equipment allows her to survive almost indefinitely underwater and in space as well as resist most airborne toxins. Its basic functions are not always sufficient for a busy warrior, however, so the Chozo used a modular construction allowing the suit to be outfitted with a wide variety of weapons systems and special armor.";
// ---
global.variasuitscan = "This is the Chozo Varia Suit, a holy suit handed down from the ancient Chozo civilization. Originally, the suit was made to traverse hazardous environments, but was later integrated to become a highly advanced combat suit. As an add-on to your Power suit, the Varia suit provides extra armor and protection from many harsh environments. The Varia Suit is very customizable, comfortable, allows for breathing in open space and can be integrated with a wide range of foreign technology.##&lt;No Special Attributes&gt;";
// ---
global.gravitysuitscan = "The Gravity Suit is another great triumph by the Chozo. As another addon to their Power Suit, the Gravity implication allows the wearer to move through liquid environments unhindered, as well resist incredibly harsh temperatures and acid rain even more so than the Varia Suit. The Gravity Suit also grants improved mobility in the joints for quicker, more agile movements. However, this made the joint areas very vulnerable, so defense is somewhat compromised. But for Chozo warriors -- who were known for their speed and agility -- this was the ideal suit amongst the race's ground forces.##&lt;Special Attributes&gt;##Greatly increased speed.#Decreased defense.#Free liquid movement.#Allows traversal of acid.";
// ---
global.phazonsuitscan = "The Phazon suit is your Varia suit infused with pure Red Phazon. Red Phazon is highly volatile and mutagenic. Not to mention, it is very rare. Luckily, your suit keeps the Phazon on the exterior. The suit grants the wearer extra weapon power, defense and the ability to traverse blue Phazon. However, Phazon-based enemy attacks are devastating to the wearer. Be wary of Phazon overload.##&lt;Special Attributes&gt;##Increased weapon power.#Slightly increased defense.#Allows traversal of Blue Phazon.";
// ---
global.corruptionsuitscan = "The Corruption suit is the ultimate suit in your arsenal. Speed and defense are greatly increased, along with a flawless power module and the ability to assimilate Phazon into energy. The wearer can pass through any environment unhindered with the exception of orange phazon, which is too corrosive and radioactive for almost anything to pass through safely.##&lt;Special Attributes&gt;##Increased speed.#Greatly increased damage.#Greatly increased defense.#Free liquid movement.#Grants resistance to almost all environmental hazards.#Allows Phazon assimilation.#Allows Hypermode.";


//////////////////////////////////
//////////////////////////////////
//// INITIALIZE SPECIAL DOORS ////
//////////////////////////////////
///////////////////////////////////////////
// Used for despawning and changing      //
// doors and/or objects in rooms that    //
// have already been destroyed, changed, //
// or otherwise manipulated and should   //
// stay the same for the duration of     //
// the game or time that the player is   //
// in the region.                        //
////////////////////////////////////////////
// Format...                              //
// (roomname)(objecttype)(actiontype)     //
// (roomname): lowercase.                 //
// (objecttype): door = hatch. bsdoor =   //
//     bomb slot door.                    //
// (actiontype): opened = opened or used. //
//     destroyed = removed.               //
////////////////////////////////////////////
// Use a link variable for doors of the   //
// same object in the same room to help   //
// the script differentiate between them. //
////////////////////////////////////////////

//AIDemo1
global.aidemo1bsdooropen = 0;

//AIDemo2
global.aidemo2reddoor1open = 0;
global.aidemo2reddoor2open = 0;

//AIDemo3
global.aidemo3reddoor1open = 0;
global.aidemo3reddoor2open = 0;

//AIDemo5
global.aidemo5greendoor1open = 0;
global.aidemo5greendoor2open = 0;
global.aidemo5bsdoor1open = 0;
global.aidemo5bsdoor2open = 0;
global.aidemo5bsdoor3open = 0;
global.aidemo5gendestroyed = 0;

//AIDemo7
global.aidemo7bsdoor1open = 0;
global.aidemo7bsdoor2open = 0;
global.aidemo7greendoor1open = 0;
global.aidemo7greendoor2open = 0;
global.aidemo7greendoor3open = 0;
global.aidemo7greendoor4open = 0;

//AIDemo8
global.aidemo8bsdooropen = 0;
global.aidemo8greendooropen = 0;

//AIDemo11
global.aidemo11yellowdooropen = 0;

//AIDemo12
global.aidemo12yellowdooropen = 0;

//AIDemo13
global.aidemo13yellowdoor1open = 0;
global.aidemo13yellowdoor2open = 0;

//AIDemo14
global.aidemo14yellowdooropen = 0;

//////////////////////////////////
//////////////////////////////////
//// INITIALIZE SPECIAL ITEMS ////
//////////////////////////////////
//////////////////////////////////////////////
// Used for despawning and changing items   //
// that have already been obtained.         //
//////////////////////////////////////////////
// Format...                                //
// (itemtype)(number)                       //
// (itemtype): expansion, tank, etc.        //
// (number): number of item. 1st, 53rd,     //
// etc.                                     //
//////////////////////////////////////////////
// Set in room creation codes.              //
//////////////////////////////////////////////
// Legend...                                //
// mexo = missile expansion obtained.       //
// sexo = super missile expansion obtained. //
// pbexo = power bomb expansion obtained    //
// eto = energy tank obtained.              //
// ato = accel tank obtained.               //
//////////////////////////////////////////////
// Missile Expansions...
global.mexo1 = 0; //AIDemo2
global.mexo2 = 0; //AIDemo9
global.mexo3 = 0; //AIDemo12
global.mexo4 = 0; //AIDemo11
global.mexo5 = 0; //AIDemo13
global.mexo6 = 0; //AIDemo16
global.mexo7 = 0; //AIDemo17
// Super Missile Expansions...
global.sexo1 = 0; //AIDemo6
global.sexo2 = 0; //AIDemo12
global.sexo3 = 0; //AIDemo15
//Power Bomb Expansions...
global.pexo1 = 0; //AIDemo12
// Energy Tanks...
global.eto1 = 0; //AIDemo2
global.eto2 = 0; //AIDemo7
global.eto3 = 0; //AIDemo11
// Accel Tanks...
global.ato1 = 0; //AIDemo5
global.ato2 = 0; //AIDemo12

////////////////////////
////////////////////////
//// INITIALIZE MAP ////
////////////////////////
////////////////////////
ResetMap();
InitMap();

////////////////////////////////
////////////////////////////////
//// INITIALIZE ALL GLOBALS ////
////////////////////////////////
////////////////////////////////
// ====================================================
// Variables that should be turned
// on or off based on whether or
// not the current release is a
// test build or a public build.
sound_global_volume(0);
global.debugenabled = 1;
global.menuenabled = true; // Remove when menu is done.
// ====================================================
global.powerbeamspd = 4;
global.waveplasmabeamspd = 9;
global.spazerbeamspd = 10;
global.pulsebeamspd = 3;
global.icedarkbeamspd = 11;
global.novabeamspd = "X";
global.lightbeamspd = 15;
global.phazonbeamspd = 8;

health = 100;
border_set = 50;

global.accel = 1;
global.accelprev = global.accel;
global.bombavail = false;
global.border = 10;
global.canhypermode = true;
global.canpause = false;
global.charge = 0;
global.chargeshooting = false;
global.charging = false;
global.cinema = false;
global.corruptionsuitavail = false;
global.cstx = -1000; // Current scan target's X variable.
global.csty = -1000; // Current scan target's Y variable.
global.currentmusic = -1;
global.currentscanstatus = 0;
global.curroom = 0;
global.cursor = 0;
global.darkbeamavail = false;
global.deacborder1 = 150;
global.debugmode = false;
global.destinroom = 0;
global.deacready = false;
global.diffuseravail = false;
global.diffusionmissilelauncheravail = false;
global.drawdiffusionmissiletracker = false;
global.drawhmissiletracker = false;
global.drawmissiletracker = false;
global.drawpbcount = false;
global.drawpowerbombtracker = false;
global.drawscrewbombtracker = false;
global.drawsupermissiletracker = false;
global.drawtanks = 0;
global.etanks = 0;
global.exitdir = 0;
global.flickerspeed = 100;
global.framerate = 60;
global.fullscreentog = true;
global.fullscreen = 1;
global.gainhealth = 0;
global.goback = false;
global.gravitysuitavail = false;
global.hiddenfade = 0;
global.hiddenfade2 = 0;
global.homingmissilelauncheravail = false;
global.homing = false;
global.hypermode = false;
global.icebeamavail = false;
global.inenergystation = false;
global.initializedroom1 = false;
global.inslot = false;
global.interpolate = 0;
global.inwater = false;
global.inweaponstation = false;
// ---
// Jet Boost variables are obsolete and only obtainable via debug mode.
global.jetboostavail = false;
global.jetboostdelay = 40;
global.jetboostdura = .25;
// ---
global.justswitchedweapon = false;
global.lightbeamavail = false;
global.lightsearavail = false;
global.lightsearcharge = 0;
global.mapoffsetx = 0;
global.mapoffsety = 0;
global.maxetanks = 0;
global.maxhealth = 100;
global.maxmissiles = 10;
global.maxpowerbombs = 1;
global.maxsupermissiles = 2;
global.menubg = -1;
global.missilelauncheravail = false;
global.missiles = 10;
global.missiletime = 0;
global.morphballavail = false;
global.morphed = false;
global.mouselocked = false;
global.mutemusic = 0;
global.novabeamavail = false;
global.objective = "";
global.objwidth = 93;
global.onice = false;
global.onscan = false;
global.overheat = 0;
global.phazon = 0;
global.phazonbeamavail = false;
global.phazoncharging = false;
global.phazonsuitavail = false;
global.plasmabeamavail = false;
global.playerangle = 0;
global.playerballspeed = 6;
global.playerJustDied = false;
global.playersuitspeed = 3;
global.playerturnspeed = 20;
global.playlowhealthsnds = 1;
global.playscansound = 1;
global.playerx = 0;
global.playery = 0;
global.powerbombavail = false;
global.powerbombs = 1;
global.prevcursor = 0;
global.prevweapon = 0;
global.prevweapon2 = 0;
global.previousroom = -1;
global.primweapon = 1;
global.pulseavail = false;
global.quest = 0;
global.range = 100;
global.reveal = false;
global.roomalpha = 1;
global.screwbombavail = false;
global.secweapon = 3;
global.secweaponprevious = 3;
global.shaking = false;
global.showscanrange = false;
global.spawngametdelay1 = 15;
global.spawngametdelay2 = 90;
global.spazerbeamavail = false;
global.spazerdirdelay = 5.5;
global.speedboost = false;
global.speedboosteravail = false;
global.speedtime = 0;
global.started = true;
global.sticklightoffset = 22;
global.suit = 1;
global.supermissilelauncheravail = false;
global.supermissiles = 2;
global.titleselected = false;
global.transforming = false;
global.transfrommenu = false;
global.transto = 0;
global.turretturnspeed = 10;
global.viewshift = false;
global.wavebeamavail = false;
global.wavechargesizedist = 21;
global.wavechargesizerate = 20;
global.wavesizedist = 12;
global.wavesizerate = 14;
global.weapon = 1;
global.weaponspeed = 1;
global.windowscale = 1;
global.winscale = 1;
global.xrayon = false;
global.xrayvisoravail = false;

global.healthstr = -1;
global.missilesstr = -1;
global.maxmissilesstr = -1;
global.supermissilesstr = -1;
global.maxsupermissilesstr = -1;
global.powerbombsstr = -1;
global.maxpowerbombsstr = -1;
global.overheatstr = -1;
global.missiletimestr = -1;
global.maxetanksstr = -1;
global.weaponspeedstr = -1;
global.accelratestr = -1;
global.maxetanksstr = -1;

HyperInit(); // Rather than copy all of the speeds here, just run the script that needs to exist anyway.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(PlayerParent)) then
{
   if (global.overheat &gt; 0) draw_healthbar(view_xview[0]+141,view_yview[0]+view_hview[0]-16,view_xview[0]+201,view_yview[0]+view_hview[0]-4,global.overheat,c_black,make_color_rgb(0,128,255),c_red,0,true,false);
   if (global.weapon = 13) and (global.missiletime &gt; 0) draw_healthbar(view_xview[0]+327,view_yview[0]+view_hview[0]-16,view_xview[0]+387,view_yview[0]+view_hview[0]-4,global.missiletime,c_black,c_red,make_color_rgb(0,128,255),0,true,false);

   if (global.charge &lt; 31) col = make_color_rgb(255,0,0);
   if (global.charge &lt; 61) and (global.charge &gt; 30) col = make_color_rgb(255,128,0);
   if (global.charge &gt; 61) and (global.charge &lt; 100) col = make_color_rgb(255,255,0);
   if (global.charge = 100) then
   {
      if (flashup = true) flashc += 10;
      if (flashdown = true) flashc -= 10;
      if (flashc &lt;= 0) { flashup = true; flashdown = false; }
      if (flashc &gt;= 100) { flashdown = true; flashup = false; }
      col = make_color_rgb(flashc+60,flashc+90,255);
   }
   if (global.charging)
   and (global.charge &gt; 0)
   and !(global.chargeshooting) then
      { draw_healthbar(view_xview[0]+466,view_yview[0]+view_hview[0]-16,view_xview[0]+526,view_yview[0]+view_hview[0]-4,global.charge,c_black,col,col,0,true,false); }
}

//----------------------------------------------------------------------
// Master Text Controller
//----------------------------------------------------------------------

//Draw Current Objective
{
   var ox,oy;
   ox = view_xview[0]+view_wview[0]-102;
   oy = view_yview+193;
   draw_set_font(ObjectiveFont);
   draw_set_halign(fa_right);   
   draw_set_valign(fa_top);
   draw_set_color(c_ltgray);
   draw_set_alpha(1);
   draw_text_ext(ox+global.objwidth,oy,global.objective,9,global.objwidth);
}

if (instance_exists(ScanParent))
{
   var a;
   a = instance_nearest(mouse_x,mouse_y,ScanParent);
   global.nearestscanx = a.x;
   global.nearestscany = a.y;
   
   with (a)
   {
      if (collision_point(mouse_x,mouse_y,id,0,0)) global.onscan = true;
      else global.onscan = false;
      
      if (instance_exists(PlayerParent)) then
      {
         if (point_distance(x,y,PlayerParent.x,PlayerParent.y) &gt; 255) global.currentscanstatus = 0; // Out of range.
         if (point_distance(x,y,PlayerParent.x,PlayerParent.y) &lt; 256)
         {
            if (collision_line(x,y,PlayerParent.x,PlayerParent.y,BlockParent,true,true)) global.currentscanstatus = 1; // Line of sight blocked.
            else global.currentscanstatus = 2; //Sight clear, in range.
         }
      }
   }
}

//Draw Scan Popups
{
   draw_set_halign(fa_center);
   draw_set_alpha(.7);
   draw_set_valign(fa_bottom);
   draw_set_font(ScanRangeFont);
   if (instance_exists(PlayerParent)) and (global.cursor = 2)
   {
      switch (global.currentscanstatus)
      {
         case 0: // Target is out of range
            draw_set_color(c_red);
            if (global.onscan)
            {
               draw_text_ext(global.nearestscanx,global.nearestscany-7,"OUT OF RANGE",-1,-1);
               draw_text_ext(global.nearestscanx,global.nearestscany-16,string_insert(string_format(point_distance(global.nearestscanx,global.nearestscany,PlayerParent.x,PlayerParent.y), 3, 0), "Distance: ", 11),-1,-1);
            }
            break;
         case 1: // Target is in range but line of sight is blocked
            if (global.onscan)
            {
               draw_set_color(c_red);
               draw_text_ext(global.nearestscanx,global.nearestscany-7,"SIGHT BLOCKED",-1,-1);
               draw_text_ext(global.nearestscanx,global.nearestscany-16,string_insert(string_format(point_distance(global.nearestscanx,global.nearestscany,PlayerParent.x,PlayerParent.y), 3, 0), "Distance: ", 11),-1,-1);
            }
            break;
         case 2: // Target is in range and line of sight is clear
            if (global.onscan)
            {
               draw_set_color(c_green);
               draw_text_ext(global.nearestscanx,global.nearestscany-16,string_insert(string_format(point_distance(global.nearestscanx,global.nearestscany,PlayerParent.x,PlayerParent.y), 3, 0), "Distance: ", 11),-1,-1);
               break;
            }
      }
   }
}

DebugScript();

DrawMap(); // This line was in the code twice. Not sure if it still need sto be.
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
