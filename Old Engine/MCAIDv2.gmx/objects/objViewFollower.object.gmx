<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(PlayerParent)) then
{
   x = PlayerParent.x;
   y = PlayerParent.y;
}
shake = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.viewshift = 1) then
{
    var lenw,lenh,dir;
    lenw=min(190,point_distance(x,y,mouse_x,mouse_y)/2);
    lenh=min(190,point_distance(x,y,mouse_x,mouse_y)/2);
    dir=point_direction(x,y,mouse_x,mouse_y);
    view_xview = x+lengthdir_x(lenw,dir) - (view_wview/2);
    view_yview = y+lengthdir_y(lenh,dir) - (view_hview/2)-11;
}
if (global.viewshift = 0) then
{
    view_xview[0] = x-view_wview[0]/2;
    view_yview[0] = y-(view_hview[0]/2)-11;
}

if (instance_exists(PlayerParent)) then
{
   if (!instance_exists(objHomingMissile))
   and (global.homing = false) 
   and (global.goback = false)
   and (global.cinema = false) then
   {
         x = PlayerParent.x;
         y = PlayerParent.y;
   }
   if (instance_exists(objHomingMissile))
   and (global.homing = true) 
   and (global.goback = false)
   and (global.cinema = false) then
   {
         x = objHomingMissile.x;
         y = objHomingMissile.y;
   }
   if (!instance_exists(objHomingMissile))
   and (global.homing = false) 
   and (global.goback = true)
   and (global.cinema = false) then
   {
      if (point_distance(x,y,PlayerParent.x,PlayerParent.y) &gt; 200) then
         { move_towards_point(PlayerParent.x,PlayerParent.y,15); }
      if (point_distance(x,y,PlayerParent.x,PlayerParent.y) &lt; 399)
      and (point_distance(x,y,PlayerParent.x,PlayerParent.y) &gt; 200) then
         { move_towards_point(PlayerParent.x,PlayerParent.y,11); }
      if (point_distance(x,y,PlayerParent.x,PlayerParent.y) &lt; 200)
      and (point_distance(x,y,PlayerParent.x,PlayerParent.y) &gt; 99) then
         { move_towards_point(PlayerParent.x,PlayerParent.y,8); }
      if (point_distance(x,y,PlayerParent.x,PlayerParent.y) &lt; 100)
      and (point_distance(x,y,PlayerParent.x,PlayerParent.y) &gt; 49) then
         { move_towards_point(PlayerParent.x,PlayerParent.y,7); }
      if (point_distance(x,y,PlayerParent.x,PlayerParent.y) &lt; 50) 
      and (point_distance(x,y,PlayerParent.x,PlayerParent.y) &gt; 24) then
         { move_towards_point(PlayerParent.x,PlayerParent.y,5); }
      if (point_distance(x,y,PlayerParent.x,PlayerParent.y) &lt; 25)
      and (point_distance(x,y,PlayerParent.x,PlayerParent.y) &gt; 2) then
         { move_towards_point(PlayerParent.x,PlayerParent.y,3); }
      if (point_distance(x,y,PlayerParent.x,PlayerParent.y) &lt; 3) then
      {
         x = PlayerParent.x;
         y = PlayerParent.y;
         global.goback = false;
      }
   }
// Keeping below segment to possibly integrate into the upcoming cinema system.
/*   if (global.cinema = true) then
   {
      if instance_exists(objHomingMissile) with (objHomingMissile) { instance_destroy(); }
      if (point_distance(x,y,CameraParent.x,CameraParent.y) &gt; 200) then
      {
         move_towards_point(CameraParent.x,CameraParent.y,9);
      }
      if (point_distance(x,y,CameraParent.x,CameraParent.y) &lt; 200)
      and (point_distance(x,y,CameraParent.x,CameraParent.y) &gt; 99) then
      {
         move_towards_point(CameraParent.x,CameraParent.y,7);
      }
      if (point_distance(x,y,CameraParent.x,CameraParent.y) &lt; 100)
      and (point_distance(x,y,CameraParent.x,CameraParent.y) &gt; 49) then
      {
         move_towards_point(CameraParent.x,CameraParent.y,5);
      }
      if (point_distance(x,y,CameraParent.x,CameraParent.y) &lt; 50) 
      and (point_distance(x,y,CameraParent.x,CameraParent.y) &gt; 24) then
      {
         move_towards_point(CameraParent.x,CameraParent.y,3);
      }
      if (point_distance(x,y,CameraParent.x,CameraParent.y) &lt; 25)
      and (point_distance(x,y,CameraParent.x,CameraParent.y) &gt; 2) then
      {
         move_towards_point(CameraParent.x,CameraParent.y,1);
      }
      if (point_distance(x,y,CameraParent.x,CameraParent.y) &lt; 3) then
      {
         x = CameraParent.x;
         y = CameraParent.y;
      }
   }
*/
}
else 
   { x = 0; y = 0; }

x += Gauss(0,1)*shake;
y += Gauss(0,1)*shake;
shake=max(0,abs(shake)-.2)

if (view_xview[0] &lt;= 0-110) view_xview[0] = 0-110;
if (view_xview[0] &gt;= room_width-view_wview[0]+110) view_xview = room_width-view_wview[0]+110;
if (view_yview[0] &lt;= 0-41) view_yview[0] = 0-41;
if (view_yview[0] &gt;= room_height-view_hview[0]+19) view_yview = room_height-view_hview[0]+19;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
