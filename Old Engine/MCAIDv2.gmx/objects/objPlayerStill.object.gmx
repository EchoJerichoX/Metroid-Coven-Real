<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerVaria</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>PlayerParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.transforming = false) then
{
   if (global.morphed = false) then
   {
      switch (global.suit)
      {
         case 1:
            sprite_index = sprPlayerVariaMoving; break;
         case 2:
            sprite_index = sprPlayerGravityMoving; break;
         case 3:
            sprite_index = sprPlayerPhazonMoving; break;
         case 4:
            sprite_index = sprPlayerCorruptionMoving; break;
      }
   }
   if (global.morphed = true) then
   {
      switch (global.suit)
      {
         case 1:
            sprite_index = sprPlayerMorphBallVaria; image_speed = .75; break;
         case 2:
            sprite_index = sprPlayerMorphBallGravity; image_speed = 1; break;
         case 3:
            sprite_index = sprPlayerMorphBallPhazon; image_speed = .75; break;
         case 4:
            sprite_index = sprPlayerMorphBallCorruption; image_speed = 1; break;
      }
   }
}
if (global.morphed = false) then
{
   switch (global.suit)
   {
      case 1:
         sprite_index = sprPlayerVaria; break;
      case 2:
         sprite_index = sprPlayerGravity; break;
      case 3:
         sprite_index = sprPlayerPhazon; break;
      case 4:
         sprite_index = sprPlayerCorruption; break;
   }
}
if (global.morphed = true) then
{
   switch (global.suit)
   {
      case 1:
         sprite_index = sprPlayerMorphBallVaria; image_speed = 0; break;
      case 2:
         sprite_index = sprPlayerMorphBallGravity; image_speed = 0; break;
      case 3:
         sprite_index = sprPlayerMorphBallPhazon; image_speed = 0; break;
      case 4:
         sprite_index = sprPlayerMorphBallCorruption; image_speed = 0; break;
   }
}

destindir = 0;
if (!instance_exists(objPlayerCannon)) instance_create(x,y,objPlayerCannon);
if (global.morphed) alarm[2] = 1;
boost = false;

if (global.speedboost)
and (instance_exists(fadeFromBlack)) then
{
   switch (global.exitdir)
   {
      case 0:
         if (CheckKeyPress(MOVERIGHT)) alarm[0] = 1; break;
      case 90:
         if (CheckKeyPress(MOVEUP)) alarm[0] = 1; break;
      case 180:
         if (CheckKeyPress(MOVELEFT)) alarm[0] = 1; break;
      case 270:
         if (CheckKeyPress(MOVEDOWN)) alarm[0] = 1; break;
   }
}
else alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.canpause = true;
/*
// FOR AI DEMO ONLY!!!
if (global.started) with (instance_create(x,y,messageGen)) text = "Obtain all items to complete the AI Demo level.#Objectives updated."
global.started = false;
// FOR AI DEMO ONLY!!!
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.morphed)
{
   with (instance_create(x,y,objPlayerBallLight))
   { 
      image_index = other.image_index; 
      image_angle = other.image_angle;
   }
}
if (global.suit = 4) and (!global.morphed) then
{ 
   repeat (choose(1,2)) 
   { 
      with (instance_create(x-7+random(15),y-7+random(15),objPhazonSpark))
         { image_speed = 1+random(1); fadespeed = .05; }
   }
}
alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (collision_point(x,y,objHideMap,true,true))
   { global.hiddenfade = 1; global.hiddenfade2 = 1; }
else
   { global.hiddenfade = 0; global.hiddenfade2 = 0; }
   
if (global.transforming = false) then
{
   if (global.morphed = false) then
   {
      switch (global.suit)
      {
         case 1:
            sprite_index = sprPlayerVariaMoving; break;
         case 2:
            sprite_index = sprPlayerGravityMoving; break;
         case 3:
            sprite_index = sprPlayerPhazonMoving; break;
         case 4:
            sprite_index = sprPlayerCorruptionMoving; break;
      }
   }
   if (global.morphed = true) then
   {
      switch (global.suit)
      {
         case 1:
            sprite_index = sprPlayerMorphBallVaria; image_speed = .75; break;
         case 2:
            sprite_index = sprPlayerMorphBallGravity; image_speed = 1; break;
         case 3:
            sprite_index = sprPlayerMorphBallPhazon; image_speed = .75; break;
         case 4:
            sprite_index = sprPlayerMorphBallCorruption; image_speed = 1; break;
      }
   }
}
if (global.morphed = false) then
{
   switch (global.suit)
   {
      case 1:
         sprite_index = sprPlayerVaria; break;
      case 2:
         sprite_index = sprPlayerGravity; break;
      case 3:
         sprite_index = sprPlayerPhazon; break;
      case 4:
         sprite_index = sprPlayerCorruption; break;
   }
}
if (global.morphed = true) then
{
   switch (global.suit)
   {
      case 1:
         sprite_index = sprPlayerMorphBallVaria; image_speed = 0; break;
      case 2:
         sprite_index = sprPlayerMorphBallGravity; image_speed = 0; break;
      case 3:
         sprite_index = sprPlayerMorphBallPhazon; image_speed = 0; break;
      case 4:
         sprite_index = sprPlayerMorphBallCorruption; image_speed = 0; break;
   }
}
if (!instance_exists(fadeToBlack))
{
    if (instance_exists(objPlayerSpawn)) alarm[0] = 235;
    else alarm[0] = 5;
}
instance_create(x,y,objViewFollower);
//image_angle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (instance_create(x,y,objPlayer))
{
    if collision_point(x,y,objHideMap,true,true) hiddenfade = 1;
    if (global.speedboost)
    {
      mspeed = 4+global.playersuitspeed*2;
      speed_timer = 150;
      global.speedtime = 55;
      moving_direction = other.destindir;
      global.speedboost = true;
    }
}
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>LightCircle(x,y,global.range/2+15,.5);
LightCircle(x,y,global.range,.1);
global.reveal = false;
if (collision_point(x,y,objHideMap,true,true))
{
   global.reveal = true;
   RevealCircle(x,y,global.range/2+25,.6*global.hiddenfade);
   RevealCircle(x,y,global.range/4,global.hiddenfade);
   RevealCircle(x,y,global.range/4,.7*global.hiddenfade2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var DiffDir;
DiffDir=destindir-image_angle;
if abs(DiffDir)&lt;=180 image_angle+=median(-global.playerturnspeed,global.playerturnspeed,DiffDir) else image_angle+=median(-global.playerturnspeed,global.playerturnspeed,DiffDir-sign(DiffDir)*360);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
