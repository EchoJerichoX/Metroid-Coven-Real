<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shake = 0; // Controls the screen shake.
DrawRed = false; // Draws a short, red flash on the screen if we are taking damage.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DrawRed = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if (eId.fadeStage &gt; -1) or (eId.paused &gt; 0) exit; // If a message is on-screen, stop doing anything.
// Find the target x and y that the view will follow.
if (instance_exists(oPlayer))
{
    ox = lengthdir_x(-30,point_direction(oPlayer.x,oPlayer.y,mouse_x,mouse_y));
    oy = lengthdir_y(-30,point_direction(oPlayer.x,oPlayer.y,mouse_x,mouse_y));
    //xx = mean(oPlayer.x,mean(eId.x+ox,oPlayer.x))+choose(shake,-shake);
    //yy = mean(oPlayer.y,mean(eId.y+oy,oPlayer.y))+choose(shake,-shake);
    xx = mean(oPlayer.x,mouse_x);
    yy = mean(oPlayer.y,mouse_y);
}
else exit;
// Move towards the target view location.

switch (eId.transstep)
{
    case -1:
        if (instance_exists(oPlayer)) and (eId.paused = 0) and (eId.fadeStage = -1)
            { move_towards_point(xx,yy,point_distance(xx,yy,x,y)*.1); }
        else speed = 0;
        break;
    case 0: exit; break;
    case 1: case 2: case 3: case 4: case 5: case 6: x = oPlayer.x; y = oPlayer.y; break;
}
// Center the view on the controller.
view_xview = (x-view_wview/2)+random_range(shake,-shake);
view_yview = (y-view_hview/2)+random_range(shake,-shake);
if (shake &gt; 0) shake -= 1; // Descale the view shake gradually.

// Limit the view location to the edges of the room.
if (view_xview &lt; 0) view_xview = 0;
if (view_yview &lt; 0) view_yview = 0;
if ((view_xview+view_wview) &gt; room_width) view_xview = room_width-view_wview;
if ((view_yview+view_hview) &gt; room_height) view_yview = room_height-view_hview;
x = round(x);
y = round(y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = round(x);
y = round(y);
// If the player just got hit, tell the game it is okay to flash the screen.
if instance_exists(oPlayer)
    { if (oPlayer.CanTakeHit = true) alarm[9] = 2; }
// Draw the red screen flash from the player taking damage.
if (DrawRed = true)
{
    draw_set_alpha(.4);
    draw_set_color(c_red);
    draw_rectangle(view_xview,view_yview,view_xview+view_wview,view_yview+view_hview,false);
    draw_set_alpha(.5);
    DrawRed = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
