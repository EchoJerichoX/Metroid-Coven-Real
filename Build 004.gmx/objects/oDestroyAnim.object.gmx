<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hittype = 0;
r = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(oPlayer))
{
    if (point_distance(x+sprite_width/2,y+sprite_height/2,oPlayer.x,oPlayer.y) &lt; 16) then
      { alarm[0] = 1; exit; }
}
if (sprite_index = sprBlockBreak16) sprite_index = sprBlockReform16;
if (sprite_index = sprBlockBreak8) sprite_index = sprBlockReform8;
image_speed = .25;
visible = true;
//sound_play(Reform1,Reform2,Reform3,Reform4,Reform5,Reform6));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (sprite_index)
{
    case sprMissileSmoke:
        if (image_speed &gt; .05) image_speed -= .005;
        image_xscale += .01;
        image_yscale += .01;
        break;
    case sprShockwave:
        image_xscale += 0.1;
        image_yscale = image_xscale;
        if (image_alpha &gt; 0) image_alpha -= 0.05;
        else instance_destroy();
        break;
}
if (sprite_index = sprMissileSmoke) 
{
    if (image_speed &gt; .05) image_speed -= .005;
    image_xscale += .01;
    image_yscale += .01;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index = sprShockwave) exit;
if (r = 1) // Are we a reforming block?
    { alarm[0] = 300; r = 0; image_speed = 0; visible = false; exit; }
if (sprite_index = sprBlockReform16) or (sprite_index = sprBlockReform8)
{
    if (instance_exists(oActor))
    {
        var na = instance_nearest(x+sprite_width/2,y+sprite_height/2,oActor);
        if (point_distance(x+sprite_width/2,y+sprite_height/2,na.x,na.y) &lt; 10) exit;
        // ^ Replace the "10" above with an adjustable number based on actor's sprite/mask size.
    }
    if (instance_exists(oPlayer))
        { if (point_distance(x+sprite_width/2,y+sprite_height/2,oPlayer.x,oPlayer.y) &lt; 8) exit; }
    if (sprite_index = sprBlockReform16) with (instance_create(x,y,oBlock16)) scDefineBlock(Blocks.bReform);
    if (sprite_index = sprBlockReform8) with (instance_create(x,y,oBlock8)) scDefineBlock(Blocks.bReform);
    // The below code will bring back the tile that we erase when a reforming block is destroyed.
    // Traditionally, the bare form of the block remains visible in Metroid games, so if we want
    //   to bring the tile back when the block reforms, just uncomment the below 3 lines.
    /*
    var ii;
    ii = tile_layer_find(eId.secrettilelayer,x+sprite_width/2,y+sprite_height/2);
    if (ii) tile_set_visible(ii,true);
    */
}
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
