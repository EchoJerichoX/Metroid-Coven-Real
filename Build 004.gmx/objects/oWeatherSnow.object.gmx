<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//////////////////////////////////
// Falling snow particle system //
//////////////////////////////////
// Particle systems.
system1 = part_system_create(); // The system for the snow.
part_system_depth(system1,-350); // Set the depth for snow.

// Snow settings.
snow1 = part_type_create();
part_type_alpha3(snow1,0,0.4,0);
part_type_color_mix(snow1,c_white,c_ltgray);
part_type_direction(snow1,0,360,0,0.1);
part_type_life(snow1,75,200);
part_type_speed(snow1,0,0.3,0,0.1);
part_type_shape(snow1,pt_shape_snow);
part_type_size(snow1,0.075,0.15,-0.0004,0);
part_type_orientation(snow1,0,360,choose(-0.1,0.1),0.1,1);

// Particle emitters.
snowe1 = part_emitter_create(system1);
var r1,r2,r3,r4,bonusrange;
bonusrange = 90;
r1 = view_xview[0]-bonusrange; // X_min.
r2 = view_xview[0]+view_wview[0]+bonusrange; // X_max.
r3 = view_yview[0]-bonusrange; // Y_min.
r4 = view_yview[0]+view_hview[0]+bonusrange; // Y_max.
part_emitter_region(system1,snowe1,r1,r2,r3,r4,ps_shape_rectangle,ps_distr_linear);

//////////////////////////////////
// Snow drift particle system 1 //
//////////////////////////////////
// Particle systems.
system2 = part_system_create(); // The system for the snow.
part_system_depth(system2,1500); // Set the depth for snow.

// Snow settings.
snow2 = part_type_create();
part_type_alpha3(snow2,0,random(0.3),0);
part_type_color_mix(snow2,c_white,c_ltgray);
part_type_direction(snow2,10,350,0,0.01);
part_type_life(snow2,100,400);
part_type_speed(snow2,0.01,0.1,0,0);
part_type_shape(snow2,pt_shape_cloud);
part_type_size(snow2,0.5,3,0,0);//////////////////////////////////////////2-4
part_type_orientation(snow2,0,360,choose(-0.1,0.1),0.1,1);

// Particle emitters.
snowe2 = part_emitter_create(system2);
var r1,r2,r3,r4,bonusrange;
bonusrange = 90;
r1 = 0-bonusrange; // X_min.
r2 = 0+room_width+bonusrange; // X_max.
r3 = 0-bonusrange; // Y_min.
r4 = 0+room_height+bonusrange; // Y_max.
part_emitter_region(system2,snowe2,r1,r2,r3,r4,ps_shape_rectangle,ps_distr_linear);

//////////////////////////////////
// Snow drift particle system 2 //
//////////////////////////////////
// Particle systems.
system3 = part_system_create(); // The system for the snow.
part_system_depth(system3,-300); // Set the depth for snow.

// Snow settings.
snow3 = part_type_create();
part_type_alpha3(snow3,0,0.1,0);
part_type_color_mix(snow3,c_white,c_ltgray);
part_type_direction(snow3,350,10,0,0.01);
part_type_life(snow3,200,600);
part_type_speed(snow3,0.01,0.3,0,0);
part_type_shape(snow3,pt_shape_cloud);
part_type_size(snow3,0.2,2,0,0);////////////////////////////////////////1-2
part_type_orientation(snow3,0,360,choose(-0.1,0.1),0.1,1);

// Particle emitters.
snowe3 = part_emitter_create(system3);
var r1,r2,r3,r4,bonusrange;
bonusrange = 90;
r1 = 0-bonusrange; // X_min.
r2 = 0+room_width+bonusrange; // X_max.
r3 = 0-bonusrange; // Y_min.
r4 = 0+room_height+bonusrange; // Y_max.
part_emitter_region(system3,snowe3,r1,r2,r3,r4,ps_shape_rectangle,ps_distr_linear);

alarm[0] = 1; // Hesitate starting systems until the room is done loading up.
update = 0;
a = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_emitter_stream(system1,snowe1,snow1,2); // Starts streaming the snow.
repeat(200) { part_system_update(system1); } // "Fast forward" the snow's movement so it's not behind when first shown.
update = 1;

a = (room_width*room_height)/65536; // Calculates room size in cells. For example, a 1024x1024 consists of 16 256x256 frames.
                                    // Therefore, a would be 16. Then just multiple that by the frequency below (freq).
var freq;
freq = 0.1;
part_emitter_stream(system2,snowe2,snow2,ceil(a*freq)); // Starts streaming the snow drifts.
repeat(900) { part_system_update(system2); } // "Fast forward" the snow's movement so it's not behind when first shown.

part_emitter_stream(system3,snowe3,snow3,ceil(a*freq)); // Starts streaming the snow drifts.
repeat(900) { part_system_update(system3); } // "Fast forward" the snow's movement so it's not behind when first shown.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set particle locations. Visible screen plus variable "bonusrange" in every direction.
if (update = 1) then
{
   var r1,r2,r3,r4,bonusrange;
   bonusrange = 90;
   r1 = view_xview[0]-bonusrange; // X_min.
   r2 = view_xview[0]+view_wview[0]+bonusrange; // X_max.
   r3 = view_yview[0]-bonusrange; // Y_min.
   r4 = view_yview[0]+view_hview[0]+bonusrange; // Y_max.
   
   part_emitter_region(system1,snowe1,r1,r2,r3,r4,ps_shape_rectangle,ps_distr_linear);
}
if (eId.paused &gt; 0)
{
    part_system_automatic_update(system1,false);
    part_system_automatic_update(system2,false);
    part_system_automatic_update(system3,false);
}
else
{
    part_system_automatic_update(system1,true);
    part_system_automatic_update(system2,true);
    part_system_automatic_update(system3,true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_type_destroy(snow1);
part_emitter_destroy(system1,snowe1);
part_system_destroy(system1);

part_type_destroy(snow2);
part_emitter_destroy(system2,snowe2);
part_system_destroy(system2);

part_type_destroy(snow3);
part_emitter_destroy(system3,snowe3);
part_system_destroy(system3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_type_destroy(snow1);
part_emitter_destroy(system1,snowe1);
part_system_destroy(system1);

part_type_destroy(snow2);
part_emitter_destroy(system2,snowe2);
part_system_destroy(system2);

part_type_destroy(snow3);
part_emitter_destroy(system3,snowe3);
part_system_destroy(system3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
